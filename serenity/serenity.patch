diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4873f5a..d3335e1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -17,7 +17,7 @@ endif(NOT CMAKE_BUILD_TYPE)
 
 
 # Optional flags
-option(NATIVE "Compile with -march=native" ON)
+set(SERENITY_MARCH "native" CACHE STRING "Compile with -march=<FLAG>")
 option(WERROR "Compile with warnings as errors" OFF)
 option(GCC_PROFILE "Compile with profile flags" OFF)
 option(GCC_COVERAGE "Compile with coverage flags" OFF)
@@ -61,9 +61,9 @@ include(src/Files.cmake)
 ## Main Targets ##
 ##################
 
-add_library(${PROJECT_NAME} ${SERENITY_CPPS} ${SERENITY_HEADERS})
-set_property(TARGET ${PROJECT_NAME} PROPERTY POSITION_INDEPENDENT_CODE ON)
-add_executable(${PROJECT_NAME}_exe ${PROJECT_SOURCE_DIR}/src/serenity.cpp)
+add_library(serenity ${SERENITY_CPPS} ${SERENITY_HEADERS})
+set_property(TARGET serenity PROPERTY POSITION_INDEPENDENT_CODE ON)
+add_executable(serenity_exe ${PROJECT_SOURCE_DIR}/src/serenity.cpp)
 
 ##################
 ## Dependencies ##
@@ -77,7 +77,7 @@ message("#=========================#")
 message("-----Checking Eigen3-----")
 message("-----Checking Intel MKL-----")
 include(AddEigen)
-add_eigen(${PROJECT_NAME} PUBLIC)
+add_eigen(serenity PUBLIC)
 
 # OpenMP
 message("-----Checking OpenMP-----")
@@ -108,31 +108,46 @@ if (NOT DEFINED HDF5_USE_STATIC_LIBRARIES)
   set(HDF5_USE_STATIC_LIBRARIES OFF)
 endif()
 find_package(HDF5 REQUIRED COMPONENTS HL CXX)
+# The following if is a small helper for systems
+#  that have HDF5 installed but do not have the
+#  cmake files installed (this seems common for
+#  many distributions)
 if (HDF5_USE_STATIC_LIBRARIES)
-  # The following if is a small helper for systems
-  #  that have HDF5 installed but do not have the
-  #  cmake files installed (this seems common for
-  #  many distributions)
-  if(NOT (TARGET hdf5::hdf5_cpp-static))
-    add_library(hdf5::hdf5_cpp-static INTERFACE IMPORTED)
-    set_property(TARGET hdf5::hdf5_cpp-static PROPERTY
-      INTERFACE_LINK_LIBRARIES "${HDF5_LIBRARIES}"
-    )
-  endif()
-  set(HDF5_TARGET hdf5::hdf5_cpp-static)
+  set(HDF5_TARGET hdf5_cpp-static)
 else()
-  # The following if is a small helper for systems
-  #  that have HDF5 installed but do not have the
-  #  cmake files installed (this seems common for
-  #  many distributions)
-  if(NOT (TARGET hdf5::hdf5_cpp-shared))
-    add_library(hdf5::hdf5_cpp-shared INTERFACE IMPORTED)
-    set_property(TARGET hdf5::hdf5_cpp-shared PROPERTY
-      INTERFACE_LINK_LIBRARIES "${HDF5_LIBRARIES}"
+  set(HDF5_TARGET hdf5_cpp-shared)
+endif()
+if(NOT TARGET ${HDF5_TARGET})
+  add_library(${HDF5_TARGET} INTERFACE IMPORTED)
+  set_target_properties(${HDF5_TARGET} PROPERTIES
+    INTERFACE_LINK_LIBRARIES "${HDF5_LIBRARIES}"
+    INTERFACE_INCLUDE_DIRECTORIES "${HDF5_INCLUDE_DIRS}"
+  )
+endif()
+
+# Ensure that the include directory set by HDF5 contains hdf5.h
+get_target_property(_hdf5_include_dirs ${HDF5_TARGET} INTERFACE_INCLUDE_DIRECTORIES)
+set(_has_hdf5_h FALSE)
+foreach(_hdf5_include_dir ${_hdf5_include_dirs})
+  if(EXISTS ${_hdf5_include_dir}/hdf5.h)
+    set(_has_hdf5_h TRUE)
+    break()
+  endif()
+
+  # Try looking for a hdf5 directory within the include directory
+  if(EXISTS ${_hdf5_include_dir}/hdf5/hdf5.h)
+    set_target_properties(${HDF5_TARGET} PROPERTIES
+      INTERFACE_INCLUDE_DIRECTORIES ${_hdf5_include_dir}/hdf5
     )
+    set(_has_hdf5_h TRUE)
+    break()
   endif()
-  set(HDF5_TARGET hdf5::hdf5_cpp-shared)
+endforeach()
+if(NOT _has_hdf5_h)
+  message(FATAL_ERROR "Could not find hdf5.h in HDF's include directorie: ${_hdf5_include_dirs}")
 endif()
+unset(_has_hdf5_h)
+unset(_hdf5_include_dirs)
 
 # Boost
 message("-----Checking Boost-----")
@@ -148,98 +163,95 @@ import_libecpint()
 #################################
 
 # Shared library
-set_target_properties(${PROJECT_NAME}
-  PROPERTIES PUBLIC_HEADER
-    "${SERENITY_HEADERS}"
+target_include_directories(serenity PUBLIC
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
+  $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/include/serenity>
+  $<$<BOOL:${MKL_FOUND}>:${MKL_INCLUDE_DIRS}>
 )
-target_include_directories(${PROJECT_NAME}
-  PUBLIC
-    #$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
-    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
-    $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/include/${PROJECT_NAME}>
-    ${HDF5_INCLUDE_DIRS}
-    $<$<BOOL:${MKL_FOUND}>:${MKL_INCLUDE_DIRS}>
-)
-target_compile_options(${PROJECT_NAME} PRIVATE
-  ${OpenMP_CXX_FLAGS}
-)
-set_target_properties(${PROJECT_NAME} PROPERTIES
+target_compile_options(serenity PRIVATE ${OpenMP_CXX_FLAGS})
+set_target_properties(serenity PROPERTIES
   LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib
   CXX_STANDARD 14
 )
-target_link_libraries(${PROJECT_NAME}
+target_link_libraries(serenity
   PUBLIC
     Boost::boost
     OpenMP::OpenMP_CXX
     $<$<BOOL:${GCC_COVERAGE}>:-lgcov>
     $<$<BOOL:${GCC_PROFILE}>:-pg>
-  PRIVATE
     libint2-static
+  PRIVATE
     xc
     xcfun
     ecpint
     ${HDF5_TARGET}
 )
-target_compile_definitions(${PROJECT_NAME}
-  PUBLIC
-    $<$<BOOL:${SERENITY_PREFER_XCFUN}>:SERENITY_PREFER_XCFUN>
-    $<$<BOOL:${SERENITY_USE_XCFUN}>:SERENITY_USE_XCFUN>
-    $<$<BOOL:${SERENITY_USE_LIBXC}>:SERENITY_USE_LIBXC>
-    $<$<CONFIG:Debug>:EIGEN_INITIALIZE_MATRICES_BY_NAN>
-    $<$<BOOL:${MKL_FOUND}>:EIGEN_USE_MKL_ALL>
+target_compile_definitions(serenity PUBLIC
+  $<$<BOOL:${SERENITY_PREFER_XCFUN}>:SERENITY_PREFER_XCFUN>
+  $<$<BOOL:${SERENITY_USE_XCFUN}>:SERENITY_USE_XCFUN>
+  $<$<BOOL:${SERENITY_USE_LIBXC}>:SERENITY_USE_LIBXC>
+  $<$<CONFIG:Debug>:EIGEN_INITIALIZE_MATRICES_BY_NAN>
+  $<$<BOOL:${MKL_FOUND}>:EIGEN_USE_MKL_ALL>
 )
-target_compile_options(${PROJECT_NAME}
-  PUBLIC
-    -Wall
-    -Wextra
-    -Wno-comment
-    $<$<BOOL:${NATIVE}>:-march=native>
-    $<$<BOOL:${WERROR}>:-Werror>
-    $<$<BOOL:${GCC_COVERAGE}>:-fprofile-arcs -ftest-coverage>
-    $<$<BOOL:${GCC_PROFILE}>:-pg>
-    $<$<AND:$<BOOL:${MKL_FOUND}>,$<STREQUAL:"${CMAKE_CXX_COMPILER_ID}","Intel">>:-DMKL_LP64>
+target_compile_options(serenity PUBLIC
+  -Wall
+  -Wextra
+  -Wno-comment
+  $<$<BOOL:${WERROR}>:-Werror>
+  $<$<BOOL:${GCC_COVERAGE}>:-fprofile-arcs -ftest-coverage>
+  $<$<BOOL:${GCC_PROFILE}>:-pg>
+  $<$<AND:$<BOOL:${MKL_FOUND}>,$<STREQUAL:"${CMAKE_CXX_COMPILER_ID}","Intel">>:-DMKL_LP64>
 )
+if(NOT "${SERENITY_MARCH}" STREQUAL "" AND NOT MSVC)
+  target_compile_options(serenity PUBLIC -march=${SERENITY_MARCH})
+endif()
+
 
 # Executable
-set_target_properties(${PROJECT_NAME}_exe PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
-target_link_libraries(${PROJECT_NAME}_exe
+set_target_properties(serenity_exe PROPERTIES OUTPUT_NAME serenity)
+target_link_libraries(serenity_exe
   PUBLIC
     $<$<BOOL:${GCC_COVERAGE}>:-lgcov>
     $<$<BOOL:${GCC_PROFILE}>:-pg>
   PRIVATE
-    ${PROJECT_NAME}
-    libint2-static
+    serenity
 )
-set_target_properties(${PROJECT_NAME}_exe PROPERTIES 
+set_target_properties(serenity_exe PROPERTIES
   RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
   CXX_STANDARD 14
 )
-target_compile_options(${PROJECT_NAME}_exe
+target_compile_options(serenity_exe
   PUBLIC
     -Wall
     -Wextra
     -Wno-comment
-    $<$<BOOL:${NATIVE}>:-march=native>
     $<$<BOOL:${WERROR}>:-Werror>
     $<$<BOOL:${GCC_COVERAGE}>:-fprofile-arcs -ftest-coverage>
     $<$<BOOL:${GCC_PROFILE}>:-pg>
 )
+if(NOT "${SERENITY_MARCH}" STREQUAL "" AND NOT MSVC)
+  target_compile_options(serenity_exe PUBLIC -march=${SERENITY_MARCH})
+endif()
 
 #############
 ## Install ##
 #############
 
 # Targets
-install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}_exe
-        EXPORT ${PROJECT_NAME}Targets
+install(TARGETS serenity serenity_exe
+        EXPORT serenityTargets
         RUNTIME DESTINATION bin
         LIBRARY DESTINATION lib
         ARCHIVE DESTINATION lib
-        PUBLIC_HEADER DESTINATION include/${PROJECT_NAME}
+)
+install(
+  DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/
+  DESTINATION include/serenity
+  FILES_MATCHING PATTERN "*.h"
 )
 install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/data/basis
         ${CMAKE_CURRENT_SOURCE_DIR}/data/initialGuess
-        DESTINATION share/${PROJECT_NAME}/data
+        DESTINATION share/serenity/data
 )
 
 
@@ -260,35 +272,36 @@ if(SERENITY_ENABLE_TESTS)
   import_gtest()
   message("-----Adding Test Executable-----")
   # Test exe
-  add_executable(${PROJECT_NAME}_tests ${SERENITY_TEST_FILES})
-  target_link_libraries(${PROJECT_NAME}_tests
+  add_executable(serenity_tests ${SERENITY_TEST_FILES})
+  target_link_libraries(serenity_tests
     PUBLIC
       $<$<BOOL:${GCC_COVERAGE}>:-lgcov>
       $<$<BOOL:${GCC_PROFILE}>:-pg>
     PRIVATE
       GTest::Main
       GMock::GMock
-      ${PROJECT_NAME}
-      libint2-static
+      serenity
       xcfun
       ecpint
       ${HDF5_TARGET}
   )
-  set_target_properties(${PROJECT_NAME}_tests PROPERTIES
+  set_target_properties(serenity_tests PROPERTIES
     RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
     CXX_STANDARD 14
   )
-  target_compile_options(${PROJECT_NAME}_tests
+  target_compile_options(serenity_tests
     PUBLIC
       -Wall
       -Wextra
       -Wno-comment
-      $<$<BOOL:${NATIVE}>:-march=native>
       $<$<BOOL:${WERROR}>:-Werror>
       $<$<BOOL:${GCC_COVERAGE}>:-fprofile-arcs -ftest-coverage>
       $<$<BOOL:${GCC_PROFILE}>:-pg>
   )
-  add_test(NAME ${PROJECT_NAME} COMMAND ${PROJECT_NAME}_tests)
+  if(NOT "${SERENITY_MARCH}" STREQUAL "" AND NOT MSVC)
+    target_compile_options(serenity_tests PUBLIC -march=${SERENITY_MARCH})
+  endif()
+  add_test(NAME serenity COMMAND serenity_tests)
 endif()
 
 
@@ -320,23 +333,24 @@ if (SERENITY_PYTHON_BINDINGS)
       $<$<BOOL:${GCC_COVERAGE}>:-lgcov>
       $<$<BOOL:${GCC_PROFILE}>:-pg>
     PRIVATE
-      ${PROJECT_NAME}
-      libint2-static
+      serenity
   )
   set_target_properties(serenipy PROPERTIES
     LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib
   )
   target_compile_options(serenipy
     PUBLIC
-      $<$<BOOL:${NATIVE}>:-march=native>
       $<$<BOOL:${WERROR}>:-Werror>
       $<$<BOOL:${GCC_COVERAGE}>:-fprofile-arcs -ftest-coverage>
       $<$<BOOL:${GCC_PROFILE}>:-pg>
   )
+  if(NOT "${SERENITY_MARCH}" STREQUAL "" AND NOT MSVC)
+    target_compile_options(serenipy PUBLIC -march=${SERENITY_MARCH})
+  endif()
 
   # Install
   install(TARGETS serenipy
-    EXPORT ${PROJECT_NAME}Targets
+    EXPORT serenityTargets
     LIBRARY DESTINATION lib
     )
 endif(SERENITY_PYTHON_BINDINGS)
@@ -372,9 +386,9 @@ if(SERENITY_USAGE_FROM_SOURCE)
     file(COPY ${PROJECT_SOURCE_DIR}/dev/templates/serenity.sh DESTINATION ${PROJECT_SOURCE_DIR})
   endif()
   # Create links to bin, lib and include
-  add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
+  add_custom_command(TARGET serenity POST_BUILD
                      COMMAND ${CMAKE_COMMAND} -E create_symlink "${CMAKE_BINARY_DIR}/lib" "${CMAKE_CURRENT_SOURCE_DIR}/lib")
-  add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
+  add_custom_command(TARGET serenity POST_BUILD
                      COMMAND ${CMAKE_COMMAND} -E create_symlink "${CMAKE_BINARY_DIR}/bin" "${CMAKE_CURRENT_SOURCE_DIR}/bin")
 endif(SERENITY_USAGE_FROM_SOURCE)
 
@@ -386,7 +400,7 @@ endif(SERENITY_USAGE_FROM_SOURCE)
 include(CMakePackageConfigHelpers)
 # Config Version file
 write_basic_package_version_file(
-  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake"
+  "${CMAKE_CURRENT_BINARY_DIR}/serenity-config-version.cmake"
   VERSION ${PROJECT_VERSION}
   COMPATIBILITY AnyNewerVersion
 )
@@ -394,27 +408,26 @@ write_basic_package_version_file(
 # Config file
 configure_package_config_file(
   "${CMAKE_CURRENT_SOURCE_DIR}/src/config.cmake.in"
-  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
-  INSTALL_DESTINATION "lib/cmake/${PROJECT_NAME}"
+  "${CMAKE_CURRENT_BINARY_DIR}/serenity-config.cmake"
+  INSTALL_DESTINATION "lib/cmake/serenity"
 )
 
 # Install serenity-config.cmake and serenity-config-version.cmake
 install(FILES
-  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
-  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake"
-  DESTINATION lib/cmake/${PROJECT_NAME}
+  "${CMAKE_CURRENT_BINARY_DIR}/serenity-config.cmake"
+  "${CMAKE_CURRENT_BINARY_DIR}/serenity-config-version.cmake"
+  DESTINATION lib/cmake/serenity
 )
 
 # Add all targets to the build-tree export set
 export(
   TARGETS
-    ecpint
     xc
     xcfun
     libint2-static
-    ${PROJECT_NAME}
-    ${PROJECT_NAME}_exe
-  FILE "${PROJECT_BINARY_DIR}/${PROJECT_NAME}-targets.cmake"
+    serenity
+    serenity_exe
+  FILE "${PROJECT_BINARY_DIR}/serenity-targets.cmake"
 )
 
 # Export the package for use from the build-tree
@@ -422,8 +435,7 @@ export(
 export(PACKAGE Serenity)
 
 # Install the export set for use with the install-tree
-install(EXPORT ${PROJECT_NAME}Targets
-  FILE ${PROJECT_NAME}-targets.cmake
-  DESTINATION lib/cmake/${PROJECT_NAME}
+install(EXPORT serenityTargets
+  FILE serenity-targets.cmake
+  DESTINATION lib/cmake/serenity
 )
-
diff --git a/README.md b/README.md
index dd0b625..12665ac 100644
--- a/README.md
+++ b/README.md
@@ -49,12 +49,16 @@ https://github.com/qcserenity/serenity
 Please read the following instructions carefully.
 
 ### Prerequisites
-The code has been tested and compiled with GCC/G++ (Versions 7 and newer)
-and ICC/ICPC (Versions 17.X) compilation with other compilers and compiler versions
-could still be possible.
-
-The compilation of the code is supported and tested on Linux systems.
-The compilation on MacOS should also be possible.
+The code has been tested and compiled on Linux with GCC/G++
+(Versions 7 and newer) and Clang (Versions 8 and newer)
+compilation with other compilers such as ICC should be
+possible on Linux.  
+  
+Furthermore, the code has been tested and
+compiled on MacOS using Clang, compilation with GCC on MacOS
+should most likely also be possible.  
+  
+Compilation on and for Windows is not supported at the moment.
 
 The following programs/libraries must be available on your system:
  - CMake (Version >= 3.12)
diff --git a/VERSION b/VERSION
index f0bb29e..3a3cd8c 100644
--- a/VERSION
+++ b/VERSION
@@ -1 +1 @@
-1.3.0
+1.3.1
diff --git a/cmake/AddEigen.cmake b/cmake/AddEigen.cmake
index c52ce49..ea6c393 100644
--- a/cmake/AddEigen.cmake
+++ b/cmake/AddEigen.cmake
@@ -63,9 +63,9 @@ function(add_eigen target_name mode)
     if(_CAN_LINK_OBJECT_LIBRARIES OR NOT _IS_OBJECT_LIBRARY)
       target_link_libraries(${target_name} ${mode} Eigen3::Eigen ${MKL_LIBRARIES} OpenMP::OpenMP_CXX)
     else()
-      target_include_directories(${target_name} ${mode} $<TARGET_PROPERTY:Eigen3::Eigen,INTERFACE_INCLUDE_DIRECTORIES>)
+      target_include_directories(${target_name} SYSTEM ${mode} $<TARGET_PROPERTY:Eigen3::Eigen,INTERFACE_INCLUDE_DIRECTORIES>)
     endif()
-    target_include_directories(${target_name} ${mode} ${MKL_INCLUDE_DIRS})
+    target_include_directories(${target_name} SYSTEM ${mode} ${MKL_INCLUDE_DIRS})
     target_compile_definitions(${target_name} ${mode} EIGEN_USE_MKL_ALL)
     target_compile_options(${target_name} ${mode} $<$<BOOL:${OpenMP_CXX_FOUND}>:${OpenMP_CXX_FLAGS}>)
   else()
@@ -81,7 +81,7 @@ function(add_eigen target_name mode)
         if(_CAN_LINK_OBJECT_LIBRARIES OR NOT _IS_OBJECT_LIBRARY)
           target_link_libraries(${target_name} ${mode} Eigen3::Eigen ${BLAS_LIBRARIES})
         else()
-          target_include_directories(${target_name} ${mode} $<TARGET_PROPERTY:Eigen3::Eigen,INTERFACE_INCLUDE_DIRECTORIES>)
+          target_include_directories(${target_name} SYSTEM ${mode} $<TARGET_PROPERTY:Eigen3::Eigen,INTERFACE_INCLUDE_DIRECTORIES>)
         endif()
         target_compile_definitions(${target_name} ${mode} EIGEN_USE_BLAS)
       else()
@@ -89,10 +89,9 @@ function(add_eigen target_name mode)
         if(_CAN_LINK_OBJECT_LIBRARIES OR NOT _IS_OBJECT_LIBRARY)
           target_link_libraries(${target_name} ${mode} Eigen3::Eigen)
         else()
-          target_include_directories(${target_name} ${mode} $<TARGET_PROPERTY:Eigen3::Eigen,INTERFACE_INCLUDE_DIRECTORIES>)
+          target_include_directories(${target_name} SYSTEM ${mode} $<TARGET_PROPERTY:Eigen3::Eigen,INTERFACE_INCLUDE_DIRECTORIES>)
         endif()
       endif()
     endif()
   endif()
 endfunction()
-
diff --git a/cmake/ImportLibecpint.cmake b/cmake/ImportLibecpint.cmake
index 2a21d7e..9319c8f 100644
--- a/cmake/ImportLibecpint.cmake
+++ b/cmake/ImportLibecpint.cmake
@@ -18,7 +18,6 @@ function(import_libecpint)
   set(BUILD_SHARED_LIBS OFF)
   add_subdirectory(${CMAKE_CURRENT_BINARY_DIR}/ext-ecpint-src ${CMAKE_CURRENT_BINARY_DIR}/ext-ecpint-build)
   set(BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})
-  install(TARGETS ecpint EXPORT ${PROJECT_NAME}Targets DESTINATION lib)
 
 
   # Final check if all went well
diff --git a/cmake/ImportLibxc.cmake b/cmake/ImportLibxc.cmake
index 4b572df..59f2c48 100644
--- a/cmake/ImportLibxc.cmake
+++ b/cmake/ImportLibxc.cmake
@@ -22,7 +22,7 @@ function(import_libxc)
   add_subdirectory(${CMAKE_CURRENT_BINARY_DIR}/ext-libxc-src ${CMAKE_CURRENT_BINARY_DIR}/ext-libxc-build)
   set(BUILD_TESTING ${_BUILD_TESTING})
   set(BUILD_SHARED_LIBS ${_BUILD_SHARED_LIBS})
-  install(TARGETS xc EXPORT ${PROJECT_NAME}Targets DESTINATION lib)
+  install(TARGETS xc EXPORT serenityTargets DESTINATION lib)
   target_include_directories(xc
     PUBLIC
       $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/ext-libxc-build>
diff --git a/cmake/ImportXCFun.cmake b/cmake/ImportXCFun.cmake
index 64dcf57..1c98ba1 100644
--- a/cmake/ImportXCFun.cmake
+++ b/cmake/ImportXCFun.cmake
@@ -21,7 +21,7 @@ function(import_xcfun)
   add_subdirectory(${CMAKE_CURRENT_BINARY_DIR}/ext-xcfun-src ${CMAKE_CURRENT_BINARY_DIR}/ext-xcfun-build)
   set(ENABLE_TESTALL ${_ENABLE_TESTALL})
   set(BUILD_SHARED_LIBS ${_BUILD_SHARED_LIBS})
-  install(TARGETS xcfun EXPORT ${PROJECT_NAME}Targets DESTINATION lib)
+  install(TARGETS xcfun EXPORT serenityTargets DESTINATION lib)
 
   # Final check if all went well
   if(NOT TARGET xcfun)
diff --git a/manual/SerenityUserManual.tex b/manual/SerenityUserManual.tex
index 49bbb83..b40d21b 100644
--- a/manual/SerenityUserManual.tex
+++ b/manual/SerenityUserManual.tex
@@ -63,7 +63,7 @@ User Manual
 }}\\
 \vspace{1cm}
 {\large\textbf{
-Program Version: 1.3.0\\
+Program Version: 1.3.1\\
 Manual Generated: \today
 }}\\
 \vspace{2cm}
@@ -127,13 +127,16 @@ Please read the following instructions carefully, these instructions can also be
 the source code.
 
 \section{Prerequisites}
-
-The code has been tested and compiled with GCC/G++ (Versions 7 and newer)
-and ICC/ICPC (Versions 17.X) compilation with other compilers and compiler versions
-could still be possible.\\
+The code has been tested and compiled on Linux with GCC/G++
+(Versions 7 and newer) and Clang (Versions 8 and newer)
+compilation with other compilers such as ICC should be
+possible on Linux.\\
 \\
-The compilation of the code is supported and tested on Linux systems.
-The compilation on MacOS should also be possible.\\
+Furthermore, the code has been tested and
+compiled on MacOS using Clang, compilation with GCC on MacOS
+should most likely also be possible.\\
+\\
+Compilation on and for Windows is not supported at the moment.
 \\
 The following programs/libraries must be available on your system:
 \begin{itemize}
diff --git a/src/Files.cmake b/src/Files.cmake
index 021870d..c5853fa 100644
--- a/src/Files.cmake
+++ b/src/Files.cmake
@@ -1,778 +1,779 @@
 set(SERENITY_CPPS
-  ${PROJECT_SOURCE_DIR}/src/system/SystemController.cpp
-  ${PROJECT_SOURCE_DIR}/src/energies/EnergyComponentController.cpp
-  ${PROJECT_SOURCE_DIR}/src/energies/EnergyComponentPrinter.cpp
-  ${PROJECT_SOURCE_DIR}/src/basis/SphericalHarmonicsRotations.cpp
-  ${PROJECT_SOURCE_DIR}/src/basis/BasisFunctionProvider.cpp
-  ${PROJECT_SOURCE_DIR}/src/basis/CartesianToSphericalTransformer.cpp
-  ${PROJECT_SOURCE_DIR}/src/basis/BasisFunctionMapper.cpp
-  ${PROJECT_SOURCE_DIR}/src/basis/Transformation.cpp
-  ${PROJECT_SOURCE_DIR}/src/basis/CustomBasisController.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/Line.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/Ellipse.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/MolecularSurfaceController.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/XyzFileToGeometryConverter.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/Point.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/DelleySurfaceConstructor.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/AtomTypeFactory.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/Geometry.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/MolecularSurfaceFactory.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/Triangle.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/Sphere.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/GeometryFileReader.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/GEPOLSurfaceConstructor.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/Atom.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/AtomType.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/Plane.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/CoreCoreRepulsionDerivative.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/NumericalGeomGradCalc.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/NumericalHessianCalc.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/OrbitalPairDIISWrapper.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/CouplingOrbitalSet.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/DomainOverlapMatrixController.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/LocalCorrelationController.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/LocalAOSigmaVectorWrapper.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/KLOrbitalSet.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/LRSCFController.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Kernel/Kernel.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/KernelSigmaVector.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/EOSigmaVector.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/KSigmaVector.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/DeltaESigmaVector.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/CoulombSigmaVector.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/SigmaVector.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Analysis/DipoleIntegrals.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Analysis/ExcitationSpectrum.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Analysis/LRSCFAnalysis.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Analysis/ResponseProperties.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/ResponseSolver.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/LRSCFSetup.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/EigenvalueSolver.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/Besley.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/CC/DLPNO_CCSD_T0.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/CC/CCSD_T.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/CC/DLPNO_CCSD.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/CC/CCSD.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/MP2.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/OrbitalPairSelector.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/RIMP2.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/LocalMP2.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/DipoleApproximationToPairEnergies.cpp
+  ${PROJECT_SOURCE_DIR}/src/basis/Shell.cpp
   ${PROJECT_SOURCE_DIR}/src/basis/AtomCenteredBasisController.cpp
+  ${PROJECT_SOURCE_DIR}/src/basis/CustomBasisController.cpp
+  ${PROJECT_SOURCE_DIR}/src/basis/Transformation.cpp
   ${PROJECT_SOURCE_DIR}/src/basis/AtomCenteredBasisControllerFactory.cpp
-  ${PROJECT_SOURCE_DIR}/src/basis/Shell.cpp
+  ${PROJECT_SOURCE_DIR}/src/basis/BasisFunctionMapper.cpp
+  ${PROJECT_SOURCE_DIR}/src/basis/CartesianToSphericalTransformer.cpp
   ${PROJECT_SOURCE_DIR}/src/basis/BasisExtension.cpp
+  ${PROJECT_SOURCE_DIR}/src/basis/SphericalHarmonicsRotations.cpp
   ${PROJECT_SOURCE_DIR}/src/basis/BasisController.cpp
-  ${PROJECT_SOURCE_DIR}/src/dft/Functional.cpp
-  ${PROJECT_SOURCE_DIR}/src/dft/functionals/CompositeFunctionals.cpp
-  ${PROJECT_SOURCE_DIR}/src/dft/functionals/FunctionalLibrary.cpp
-  ${PROJECT_SOURCE_DIR}/src/dft/functionals/BasicFunctionals.cpp
-  ${PROJECT_SOURCE_DIR}/src/dft/functionals/wrappers/LibXC.cpp
-  ${PROJECT_SOURCE_DIR}/src/dft/functionals/wrappers/XCFun.cpp
-  ${PROJECT_SOURCE_DIR}/src/dft/dispersionCorrection/DispersionData.cpp
-  ${PROJECT_SOURCE_DIR}/src/dft/dispersionCorrection/DispersionCorrectionCalculator.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/SCFAnalysis.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/ConvergenceController.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/Scf.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/DensityInitialGuessCalculator.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/HCoreGuessCalculator.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/AtomicDensityGuessCalculator.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/SuperpositionOfAtomicPotentials.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/ExtendedHueckel.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/InitialGuessCalculator.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/InitialGuessFactory.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/damper/DynamicDamping.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/damper/StaticDamping.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/damper/ArithmeticSeriesDamping.cpp
-  ${PROJECT_SOURCE_DIR}/src/io/CubeFileWriter.cpp
-  ${PROJECT_SOURCE_DIR}/src/io/IOOptions.cpp
-  ${PROJECT_SOURCE_DIR}/src/io/FormattedOutput.cpp
-  ${PROJECT_SOURCE_DIR}/src/io/FormattedOutputStream.cpp
-  ${PROJECT_SOURCE_DIR}/src/io/DataOnGridWriter.cpp
-  ${PROJECT_SOURCE_DIR}/src/io/PlaneFileWriter.cpp
-  ${PROJECT_SOURCE_DIR}/src/io/GeneralGridFileWriter.cpp
-  ${PROJECT_SOURCE_DIR}/src/io/Filesystem.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/BUReconstructionPotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/PCMPotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/LevelshiftPotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/FuncPotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/HCorePotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/CoulombPotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/IncrementalFockMatrix.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/HuzinagaFDEProjectionPotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/ECPInteractionPotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/NAddFuncPotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/basis/BasisFunctionProvider.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/PCMOptions.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/SCFOptions.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/GeometryOptions.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/LocalizationOptions.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/GridOptions.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/EmbeddingOptions.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/CorrelatedMethodsOptions.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/DFTOptions.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/BasisOptions.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/MiscOptions.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/ElectronicStructureOptions.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/Settings.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/LRSCFOptions.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/ExchangePotential.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/HFPotential.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/SAOPPotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/LRXPotential.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/ExchangeInteractionPotential.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/ERIPotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/HCorePotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/CoulombInteractionPotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/IncrementalFockMatrix.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/LevelshiftHybridPotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/OptEffPotential.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/NEInteractionPotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/HuzinagaFDEProjectionPotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/OptEffPotential.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/EffectiveCorePotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/CoulombInteractionPotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/TDReconstructionPotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/ExchangePotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/CoulombPotential.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/HoffmannProjectionPotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABERIPotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABFuncPotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABLRExchangePotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/LRXPotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/NAddFuncPotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/LevelshiftPotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/TDReconstructionPotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/FuncPotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/BUReconstructionPotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/ECPInteractionPotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/PCMPotential.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABExchangePotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABEffectiveCorePotential.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABCoulombInteractionPotential.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABNAddFuncPotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABEffectiveCorePotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABFuncPotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABERIPotential.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABCoreHamiltonian.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABCoulombInteractionPotential.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABLRExchangePotential.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABBundles/ABEmbeddedBundleFactory.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABBundles/ABEmbeddedBundle.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/PBEPotentials.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/FDEPotentials.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/FDEPotentialBundleFactory.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/ESIPotentials.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/bundles/EDAPotentials.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/HFPotentials.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/bundles/DFTPotentials.cpp
-  ${PROJECT_SOURCE_DIR}/src/memory/MemoryManager.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/DOIBasedSelecter.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/QuasiCanonicalPAODomainConstructor.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/ESIPotentials.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/FDEPotentials.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/HFPotentials.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/FDEPotentialBundleFactory.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/PBEPotentials.cpp
+  ${PROJECT_SOURCE_DIR}/src/io/FormattedOutput.cpp
+  ${PROJECT_SOURCE_DIR}/src/io/FormattedOutputStream.cpp
+  ${PROJECT_SOURCE_DIR}/src/io/DataOnGridWriter.cpp
+  ${PROJECT_SOURCE_DIR}/src/io/PlaneFileWriter.cpp
+  ${PROJECT_SOURCE_DIR}/src/io/CubeFileWriter.cpp
+  ${PROJECT_SOURCE_DIR}/src/io/GeneralGridFileWriter.cpp
+  ${PROJECT_SOURCE_DIR}/src/io/Filesystem.cpp
+  ${PROJECT_SOURCE_DIR}/src/io/IOOptions.cpp
+  ${PROJECT_SOURCE_DIR}/src/system/SystemController.cpp
+  ${PROJECT_SOURCE_DIR}/src/solvation/ContinuumModel.cpp
+  ${PROJECT_SOURCE_DIR}/src/solvation/Solvents.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/multipoles/MultipoleMomentCalculator.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/multipoles/NumericalDipoleMomentCalculator.cpp
   ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/PNOConstructor.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/TNOConstructor.cpp
   ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/BoughtonPulayAlgorithm.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/multipoles/NumericalDipoleMomentCalculator.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/multipoles/MultipoleMomentCalculator.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/EdmistonRuedenbergLocalization.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/IBOLocalization.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/OrbitalAligner.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/QuasiCanonicalPAODomainConstructor.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/DOIBasedSelecter.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/TNOConstructor.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/populationAnalysis/MullikenPopulationCalculator.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/populationAnalysis/IAOPopulationCalculator.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/populationAnalysis/HirshfeldPopulationCalculator.cpp
   ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/NonOrthogonalLocalization.cpp
   ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/SPADEAlgorithm.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/IBOLocalization.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/OrbitalAligner.cpp
   ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/FosterBoysLocalization.cpp
   ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/PipekMezeyLocalization.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/EdmistonRuedenbergLocalization.cpp
   ${PROJECT_SOURCE_DIR}/src/analysis/localizationFunctions/ELFCalculator.cpp
   ${PROJECT_SOURCE_DIR}/src/analysis/localizationFunctions/SEDD.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/populationAnalysis/HirshfeldPopulationCalculator.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/populationAnalysis/IAOPopulationCalculator.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/populationAnalysis/MullikenPopulationCalculator.cpp
-  ${PROJECT_SOURCE_DIR}/src/misc/WarningTracker.cpp
-  ${PROJECT_SOURCE_DIR}/src/misc/FaTConvergenceAccelerator.cpp
-  ${PROJECT_SOURCE_DIR}/src/misc/SystemSplittingTools.cpp
-  ${PROJECT_SOURCE_DIR}/src/misc/Timing.cpp
-  ${PROJECT_SOURCE_DIR}/src/misc/VectorOnDiskStorageController.cpp
-  ${PROJECT_SOURCE_DIR}/src/misc/BasisSetTruncationAlgorithms.cpp
-  ${PROJECT_SOURCE_DIR}/src/integrals/OneElectronIntegralController.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/OrbitalTriple.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/OrbitalController.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/OrbitalPair.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/PAOController.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/SparseMapsController.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/SingleSubstitution.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/ElectronicStructure.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/matrices/DensityMatrixController.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/matrices/MatrixInBasis.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGridController.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/ScalarOperatorToMatrixAdder.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityAdder.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/MatrixOperatorToGridTransformer.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/MOCalculator.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/ElectrostaticPotentialOnGridController.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/DifferentialOverlapIntegralCalculator.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/BasisFunctionOnGridControllerFactory.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/SupersystemDensityOnGridController.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGridCalculator.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/CoulombPotentialOnGridCalculator.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityMatrixDensityOnGridController.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/BasisFunctionOnGridController.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/ExternalDensityOnGridController.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGridFactory.cpp
+  ${PROJECT_SOURCE_DIR}/src/dft/Functional.cpp
+  ${PROJECT_SOURCE_DIR}/src/dft/dispersionCorrection/DispersionData.cpp
+  ${PROJECT_SOURCE_DIR}/src/dft/dispersionCorrection/DispersionCorrectionCalculator.cpp
+  ${PROJECT_SOURCE_DIR}/src/dft/functionals/CompositeFunctionals.cpp
+  ${PROJECT_SOURCE_DIR}/src/dft/functionals/BasicFunctionals.cpp
+  ${PROJECT_SOURCE_DIR}/src/dft/functionals/FunctionalLibrary.cpp
+  ${PROJECT_SOURCE_DIR}/src/dft/functionals/wrappers/LibXC.cpp
+  ${PROJECT_SOURCE_DIR}/src/dft/functionals/wrappers/XCFun.cpp
   ${PROJECT_SOURCE_DIR}/src/integrals/MO3CenterIntegralController.cpp
   ${PROJECT_SOURCE_DIR}/src/integrals/RI_J_IntegralController.cpp
-  ${PROJECT_SOURCE_DIR}/src/integrals/wrappers/Libecpint.cpp
-  ${PROJECT_SOURCE_DIR}/src/integrals/wrappers/Libint.cpp
-  ${PROJECT_SOURCE_DIR}/src/integrals/transformer/Ao2MoHalfTransformer.cpp
+  ${PROJECT_SOURCE_DIR}/src/integrals/OneElectronIntegralController.cpp
   ${PROJECT_SOURCE_DIR}/src/integrals/transformer/Ao2MoExchangeIntegralTransformer.cpp
+  ${PROJECT_SOURCE_DIR}/src/integrals/transformer/Ao2MoHalfTransformer.cpp
   ${PROJECT_SOURCE_DIR}/src/integrals/transformer/Ao2MoTransformer.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/SCFOptions.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/EmbeddingOptions.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/ElectronicStructureOptions.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/LRSCFOptions.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/PCMOptions.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/LocalizationOptions.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/CorrelatedMethodsOptions.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/GeometryOptions.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/GridOptions.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/Settings.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/BasisOptions.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/DFTOptions.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/MiscOptions.cpp
-  ${PROJECT_SOURCE_DIR}/src/grid/AtomCenteredGridController.cpp
-  ${PROJECT_SOURCE_DIR}/src/grid/GridController.cpp
-  ${PROJECT_SOURCE_DIR}/src/grid/HilbertRTreeSorting.cpp
-  ${PROJECT_SOURCE_DIR}/src/grid/GridControllerFactory.cpp
-  ${PROJECT_SOURCE_DIR}/src/grid/construction/AtomGridFactory.cpp
-  ${PROJECT_SOURCE_DIR}/src/grid/construction/GridFactory.cpp
-  ${PROJECT_SOURCE_DIR}/src/grid/construction/sphere_lebedev_rule.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/RIMP2.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/LocalMP2.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/DipoleApproximationToPairEnergies.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/MP2.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/OrbitalPairSelector.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/LRSCFController.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Kernel/Kernel.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Analysis/ExcitationSpectrum.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Analysis/ResponseProperties.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Analysis/LRSCFAnalysis.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Analysis/DipoleIntegrals.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/DeltaESigmaVector.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/KernelSigmaVector.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/SigmaVector.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/CoulombSigmaVector.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/EOSigmaVector.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/KSigmaVector.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/ResponseSolver.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/Besley.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/EigenvalueSolver.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/LRSCFSetup.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/CC/CCSD_T.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/CC/DLPNO_CCSD_T0.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/CC/CCSD.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/CC/DLPNO_CCSD.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/CouplingOrbitalSet.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/LocalAOSigmaVectorWrapper.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/DomainOverlapMatrixController.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/KLOrbitalSet.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/OrbitalPairDIISWrapper.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/LocalCorrelationController.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/GradientTask.cpp
+  ${PROJECT_SOURCE_DIR}/src/integrals/wrappers/Libint.cpp
+  ${PROJECT_SOURCE_DIR}/src/integrals/wrappers/Libecpint.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/SystemSplittingTask.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/MP2Task.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/DispersionCorrectionTask.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/PlotTask.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/MultipoleMomentTask.cpp
   ${PROJECT_SOURCE_DIR}/src/tasks/LRSCFTask.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/SystemAdditionTask.cpp
   ${PROJECT_SOURCE_DIR}/src/tasks/ElectronicStructureCopyTask.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/MultipoleMomentTask.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/HessianTask.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/TDEmbeddingTask.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/CoupledClusterTask.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/PlotTask.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/ExportGridTask.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/DummyTask.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/ScfTask.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/FDETask.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/EDATask.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/ActiveSpaceSelectionTask.cpp
   ${PROJECT_SOURCE_DIR}/src/tasks/EvaluateEnergyTask.cpp
   ${PROJECT_SOURCE_DIR}/src/tasks/GeometryOptimizationTask.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/ActiveSpaceSelectionTask.cpp
   ${PROJECT_SOURCE_DIR}/src/tasks/BasisSetTruncationTask.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/SystemAdditionTask.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/MP2Task.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/DispersionCorrectionTask.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/LocalizationTask.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/FreezeAndThawTask.cpp
   ${PROJECT_SOURCE_DIR}/src/tasks/PopAnalysisTask.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/TDEmbeddingTask.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/FDETask.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/EDATask.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/CoupledClusterTask.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/GradientTask.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/ScfTask.cpp
   ${PROJECT_SOURCE_DIR}/src/tasks/TSTask.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/SystemSplittingTask.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/SparseMapsController.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/OrbitalTriple.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/PAOController.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/ElectronicStructure.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/OrbitalPair.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/SingleSubstitution.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/OrbitalController.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/matrices/DensityMatrixController.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/ExternalDensityOnGridController.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/DifferentialOverlapIntegralCalculator.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/MOCalculator.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGridFactory.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/SupersystemDensityOnGridController.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGridCalculator.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/BasisFunctionOnGridController.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGridController.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityMatrixDensityOnGridController.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/ElectrostaticPotentialOnGridController.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/MatrixOperatorToGridTransformer.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/BasisFunctionOnGridControllerFactory.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/CoulombPotentialOnGridCalculator.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityAdder.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/ScalarOperatorToMatrixAdder.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/Plane.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/AtomTypeFactory.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/Triangle.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/Ellipse.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/Point.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/Sphere.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/MolecularSurfaceController.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/Line.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/GeometryFileReader.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/Atom.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/Geometry.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/MolecularSurfaceFactory.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/XyzFileToGeometryConverter.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/DelleySurfaceConstructor.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/GEPOLSurfaceConstructor.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/AtomType.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/NumericalHessianCalc.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/NumericalGeomGradCalc.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/CoreCoreRepulsionDerivative.cpp
-  ${PROJECT_SOURCE_DIR}/src/solvation/Solvents.cpp
-  ${PROJECT_SOURCE_DIR}/src/solvation/ContinuumModel.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/FreezeAndThawTask.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/LocalizationTask.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/HessianTask.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/ExportGridTask.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/DummyTask.cpp
   ${PROJECT_SOURCE_DIR}/src/math/ScalarProductMatrix.cpp
+  ${PROJECT_SOURCE_DIR}/src/math/saddlepoint/Bofill.cpp
+  ${PROJECT_SOURCE_DIR}/src/math/saddlepoint/QST.cpp
+  ${PROJECT_SOURCE_DIR}/src/math/diis/DIIS.cpp
+  ${PROJECT_SOURCE_DIR}/src/math/diis/ADIIS.cpp
   ${PROJECT_SOURCE_DIR}/src/math/optimizer/LBFGS.cpp
-  ${PROJECT_SOURCE_DIR}/src/math/optimizer/BFGS.cpp
   ${PROJECT_SOURCE_DIR}/src/math/optimizer/SteepestDescent.cpp
   ${PROJECT_SOURCE_DIR}/src/math/optimizer/NewtonRaphson.cpp
-  ${PROJECT_SOURCE_DIR}/src/math/diis/DIIS.cpp
-  ${PROJECT_SOURCE_DIR}/src/math/diis/ADIIS.cpp
+  ${PROJECT_SOURCE_DIR}/src/math/optimizer/BFGS.cpp
   ${PROJECT_SOURCE_DIR}/src/math/linearAlgebra/DirectCD.cpp
   ${PROJECT_SOURCE_DIR}/src/math/linearAlgebra/JacobiRotation.cpp
   ${PROJECT_SOURCE_DIR}/src/math/linearAlgebra/CholeskyDecomposer.cpp
-  ${PROJECT_SOURCE_DIR}/src/math/saddlepoint/QST.cpp
-  ${PROJECT_SOURCE_DIR}/src/math/saddlepoint/Bofill.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/Scf.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/ConvergenceController.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/SCFAnalysis.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/InitialGuessCalculator.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/SuperpositionOfAtomicPotentials.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/HCoreGuessCalculator.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/AtomicDensityGuessCalculator.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/DensityInitialGuessCalculator.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/ExtendedHueckel.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/InitialGuessFactory.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/damper/StaticDamping.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/damper/ArithmeticSeriesDamping.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/damper/DynamicDamping.cpp
+  ${PROJECT_SOURCE_DIR}/src/grid/GridControllerFactory.cpp
+  ${PROJECT_SOURCE_DIR}/src/grid/GridController.cpp
+  ${PROJECT_SOURCE_DIR}/src/grid/AtomCenteredGridController.cpp
+  ${PROJECT_SOURCE_DIR}/src/grid/HilbertRTreeSorting.cpp
+  ${PROJECT_SOURCE_DIR}/src/grid/construction/GridFactory.cpp
+  ${PROJECT_SOURCE_DIR}/src/grid/construction/AtomGridFactory.cpp
+  ${PROJECT_SOURCE_DIR}/src/grid/construction/sphere_lebedev_rule.cpp
+  ${PROJECT_SOURCE_DIR}/src/misc/BasisSetTruncationAlgorithms.cpp
+  ${PROJECT_SOURCE_DIR}/src/misc/FaTConvergenceAccelerator.cpp
+  ${PROJECT_SOURCE_DIR}/src/misc/SystemSplittingTools.cpp
+  ${PROJECT_SOURCE_DIR}/src/misc/VectorOnDiskStorageController.cpp
+  ${PROJECT_SOURCE_DIR}/src/misc/Timing.cpp
+  ${PROJECT_SOURCE_DIR}/src/misc/WarningTracker.cpp
+  ${PROJECT_SOURCE_DIR}/src/energies/EnergyComponentController.cpp
+  ${PROJECT_SOURCE_DIR}/src/energies/EnergyComponentPrinter.cpp
+  ${PROJECT_SOURCE_DIR}/src/memory/MemoryManager.cpp
 )
 
 set(SERENITY_HEADERS
-  ${PROJECT_SOURCE_DIR}/src/system/SystemController.h
-  ${PROJECT_SOURCE_DIR}/src/system/System.h
-  ${PROJECT_SOURCE_DIR}/src/energies/EnergyComponentController.h
-  ${PROJECT_SOURCE_DIR}/src/energies/EnergyContributions.h
-  ${PROJECT_SOURCE_DIR}/src/energies/EnergyComponentPrinter.h
-  ${PROJECT_SOURCE_DIR}/src/basis/SphericalHarmonicsRotations.h
-  ${PROJECT_SOURCE_DIR}/src/basis/CartesianToSphericalTransformer.h
-  ${PROJECT_SOURCE_DIR}/src/basis/Basis.h
-  ${PROJECT_SOURCE_DIR}/src/basis/BasisExtension.h
-  ${PROJECT_SOURCE_DIR}/src/basis/AtomCenteredBasisControllerFactory.h
-  ${PROJECT_SOURCE_DIR}/src/basis/Shell.h
-  ${PROJECT_SOURCE_DIR}/src/basis/ABShellPairCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/MolecularSurfaceFactory.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/Point.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/DelleySurfaceConstructor.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/GeometryFileReader.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/GeometryFactory.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/Geometry.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/AtomType.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/MolecularSurfaceController.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/Sphere.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/Atom.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/XyzFileToGeometryConverter.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/Triangle.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/AtomTypeFactory.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/Ellipse.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/Line.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/Plane.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/GEPOLSurfaceConstructor.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/NumericalHessianCalc.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/HessianCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/NumericalGeomGradCalc.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/GeometryGradientCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/CoreCoreRepulsionDerivative.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/CouplingOrbitalSet.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/OrbitalPairDIISWrapper.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/LocalAOSigmaVectorWrapper.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/KLOrbitalSet.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/DomainOverlapMatrixController.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/LocalCorrelationController.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/LRSCFController.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Kernel/Kernel.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/DeltaESigmaVector.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/EOSigmaVector.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/KernelSigmaVector.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/KSigmaVector.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/CoulombSigmaVector.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/SigmaVector.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Analysis/ResponseProperties.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Analysis/ExcitationSpectrum.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Analysis/DipoleIntegrals.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Analysis/LRSCFAnalysis.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/ResponseSolver.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/EigenvalueSolver.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/LRSCFSetup.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/IterativeSolver.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/Besley.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/CC/CCSD.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/CC/DLPNO_CCSD_T0.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/CC/DLPNO_CCSD.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/CC/CCSD_T.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/RIMP2.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/OrbitalPairSelector.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/DipoleApproximationToPairEnergies.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/MP2.h
+  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/LocalMP2.h
   ${PROJECT_SOURCE_DIR}/src/basis/BasisFunctionMapper.h
   ${PROJECT_SOURCE_DIR}/src/basis/Transformation.h
-  ${PROJECT_SOURCE_DIR}/src/basis/AtomCenteredBasisController.h
   ${PROJECT_SOURCE_DIR}/src/basis/BasisController.h
-  ${PROJECT_SOURCE_DIR}/src/basis/CustomBasisController.h
+  ${PROJECT_SOURCE_DIR}/src/basis/CartesianToSphericalTransformer.h
   ${PROJECT_SOURCE_DIR}/src/basis/BasisFunctionProvider.h
-  ${PROJECT_SOURCE_DIR}/src/dft/Functional.h
-  ${PROJECT_SOURCE_DIR}/src/dft/functionals/BasicFunctionals.h
-  ${PROJECT_SOURCE_DIR}/src/dft/functionals/FunctionalLibrary.h
-  ${PROJECT_SOURCE_DIR}/src/dft/functionals/CompositeFunctionals.h
-  ${PROJECT_SOURCE_DIR}/src/dft/functionals/wrappers/LibXC.h
-  ${PROJECT_SOURCE_DIR}/src/dft/functionals/wrappers/XCFun.h
-  ${PROJECT_SOURCE_DIR}/src/dft/functionals/wrappers/PartialDerivatives.h
-  ${PROJECT_SOURCE_DIR}/src/dft/dispersionCorrection/DispersionCorrectionCalculator.h
-  ${PROJECT_SOURCE_DIR}/src/dft/dispersionCorrection/DispersionData.h
-  ${PROJECT_SOURCE_DIR}/src/dft/dispersionCorrection/DispersionRawData.h
-  ${PROJECT_SOURCE_DIR}/src/scf/Scf.h
-  ${PROJECT_SOURCE_DIR}/src/scf/ConvergenceController.h
-  ${PROJECT_SOURCE_DIR}/src/scf/SCFAnalysis.h
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/InitialGuessFactory.h
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/DensityInitialGuessCalculator.h
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/HCoreGuessCalculator.h
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/InitialGuessCalculator.h
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/SuperpositionOfAtomicPotentials.h
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/AtomicDensityGuessCalculator.h
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/ExtendedHueckel.h
-  ${PROJECT_SOURCE_DIR}/src/scf/damper/ArithmeticSeriesDamping.h
-  ${PROJECT_SOURCE_DIR}/src/scf/damper/DynamicDamping.h
-  ${PROJECT_SOURCE_DIR}/src/scf/damper/StaticDamping.h
-  ${PROJECT_SOURCE_DIR}/src/scf/damper/Damper.h
-  ${PROJECT_SOURCE_DIR}/src/io/HDF5.h
-  ${PROJECT_SOURCE_DIR}/src/io/Filesystem.h
-  ${PROJECT_SOURCE_DIR}/src/io/DataOnGridWriter.h
-  ${PROJECT_SOURCE_DIR}/src/io/Eigen3HDF5.h
-  ${PROJECT_SOURCE_DIR}/src/io/CubeFileWriter.h
-  ${PROJECT_SOURCE_DIR}/src/io/FormattedOutputStream.h
-  ${PROJECT_SOURCE_DIR}/src/io/IOOptions.h
-  ${PROJECT_SOURCE_DIR}/src/io/GeneralGridFileWriter.h
-  ${PROJECT_SOURCE_DIR}/src/io/PlaneFileWriter.h
-  ${PROJECT_SOURCE_DIR}/src/io/FormattedOutput.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/CoulombInteractionPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/TDReconstructionPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/ExchangeInteractionPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/HCorePotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/Potential.h
+  ${PROJECT_SOURCE_DIR}/src/basis/SphericalHarmonicsRotations.h
+  ${PROJECT_SOURCE_DIR}/src/basis/CustomBasisController.h
+  ${PROJECT_SOURCE_DIR}/src/basis/AtomCenteredBasisController.h
+  ${PROJECT_SOURCE_DIR}/src/basis/BasisExtension.h
+  ${PROJECT_SOURCE_DIR}/src/basis/Shell.h
+  ${PROJECT_SOURCE_DIR}/src/basis/Basis.h
+  ${PROJECT_SOURCE_DIR}/src/basis/AtomCenteredBasisControllerFactory.h
+  ${PROJECT_SOURCE_DIR}/src/basis/ABShellPairCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/settings/MiscOptions.h
+  ${PROJECT_SOURCE_DIR}/src/settings/PCMSettings.h
+  ${PROJECT_SOURCE_DIR}/src/settings/LRSCFOptions.h
+  ${PROJECT_SOURCE_DIR}/src/settings/Options.h
+  ${PROJECT_SOURCE_DIR}/src/settings/SCFOptions.h
+  ${PROJECT_SOURCE_DIR}/src/settings/EmbeddingSettings.h
+  ${PROJECT_SOURCE_DIR}/src/settings/LocalizationOptions.h
+  ${PROJECT_SOURCE_DIR}/src/settings/Reflection.h
+  ${PROJECT_SOURCE_DIR}/src/settings/DFTOptions.h
+  ${PROJECT_SOURCE_DIR}/src/settings/EmbeddingOptions.h
+  ${PROJECT_SOURCE_DIR}/src/settings/CorrelatedMethodsOptions.h
+  ${PROJECT_SOURCE_DIR}/src/settings/ElectronicStructureOptions.h
+  ${PROJECT_SOURCE_DIR}/src/settings/PCMOptions.h
+  ${PROJECT_SOURCE_DIR}/src/settings/Settings.h
+  ${PROJECT_SOURCE_DIR}/src/settings/BasisOptions.h
+  ${PROJECT_SOURCE_DIR}/src/settings/GeometryOptions.h
+  ${PROJECT_SOURCE_DIR}/src/settings/GridOptions.h
   ${PROJECT_SOURCE_DIR}/src/potentials/LRXPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/HFPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/LevelshiftPotential.h
   ${PROJECT_SOURCE_DIR}/src/potentials/ExchangePotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/CoulombPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/NAddFuncPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/LevelshiftHybridPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/BUReconstructionPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/EffectiveCorePotential.h
   ${PROJECT_SOURCE_DIR}/src/potentials/SAOPPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/ZeroPotential.h
   ${PROJECT_SOURCE_DIR}/src/potentials/NEInteractionPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/IncrementalFockMatrix.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/LevelshiftPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/ExchangeInteractionPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/BUReconstructionPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/HoffmannProjectionPotential.h
   ${PROJECT_SOURCE_DIR}/src/potentials/ERIPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/PCMPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/EffectiveCorePotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/FuncPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/Potential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/LevelshiftHybridPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/HFPotential.h
   ${PROJECT_SOURCE_DIR}/src/potentials/ECPInteractionPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/HoffmannProjectionPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/ZeroPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/IncrementalFockMatrix.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/OptEffPotential.h
   ${PROJECT_SOURCE_DIR}/src/potentials/HuzinagaFDEProjectionPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/CoulombInteractionPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/FuncPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/NAddFuncPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/PCMPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/CoulombPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/TDReconstructionPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/OptEffPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/HCorePotential.h
   ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABNAddFuncPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABLRExchangePotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABCoulombInteractionPotential.h
   ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABZeroPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABExchangePotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABCoulombInteractionPotential.h
   ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABERIPotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABEffectiveCorePotential.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABFuncPotential.h
   ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABCoreHamiltonian.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABBundles/ABEmbeddedBundle.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABLRExchangePotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABFuncPotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABEffectiveCorePotential.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABExchangePotential.h
   ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABBundles/ABEmbeddedBundleFactory.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/HFPotentials.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABBundles/ABEmbeddedBundle.h
   ${PROJECT_SOURCE_DIR}/src/potentials/bundles/ESIPotentials.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/FDEPotentialBundleFactory.h
   ${PROJECT_SOURCE_DIR}/src/potentials/bundles/EDAPotentials.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/PotentialBundle.h
   ${PROJECT_SOURCE_DIR}/src/potentials/bundles/DFTPotentials.h
-  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/PBEPotentials.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/PotentialBundle.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/HFPotentials.h
   ${PROJECT_SOURCE_DIR}/src/potentials/bundles/FDEPotentials.h
-  ${PROJECT_SOURCE_DIR}/src/memory/MemoryManager.h
-  ${PROJECT_SOURCE_DIR}/src/memory/AvailableMemory.h
-  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/DOIBasedSelecter.h
-  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/PNOConstructor.h
-  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/PAOSelecter.h
-  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/QuasiCanonicalPAODomainConstructor.h
-  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/TNOConstructor.h
-  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/BoughtonPulayAlgorithm.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/FDEPotentialBundleFactory.h
+  ${PROJECT_SOURCE_DIR}/src/potentials/bundles/PBEPotentials.h
+  ${PROJECT_SOURCE_DIR}/src/io/Filesystem.h
+  ${PROJECT_SOURCE_DIR}/src/io/HDF5.h
+  ${PROJECT_SOURCE_DIR}/src/io/PlaneFileWriter.h
+  ${PROJECT_SOURCE_DIR}/src/io/FormattedOutput.h
+  ${PROJECT_SOURCE_DIR}/src/io/IOOptions.h
+  ${PROJECT_SOURCE_DIR}/src/io/FormattedOutputStream.h
+  ${PROJECT_SOURCE_DIR}/src/io/CubeFileWriter.h
+  ${PROJECT_SOURCE_DIR}/src/io/GeneralGridFileWriter.h
+  ${PROJECT_SOURCE_DIR}/src/io/Eigen3HDF5.h
+  ${PROJECT_SOURCE_DIR}/src/io/DataOnGridWriter.h
+  ${PROJECT_SOURCE_DIR}/src/system/SystemController.h
+  ${PROJECT_SOURCE_DIR}/src/system/System.h
+  ${PROJECT_SOURCE_DIR}/src/solvation/Solvents.h
+  ${PROJECT_SOURCE_DIR}/src/solvation/ContinuumModel.h
   ${PROJECT_SOURCE_DIR}/src/analysis/multipoles/NumericalDipoleMomentCalculator.h
   ${PROJECT_SOURCE_DIR}/src/analysis/multipoles/MultipoleMomentCalculator.h
-  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/Localization.h
-  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/NonOrthogonalLocalization.h
-  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/PipekMezeyLocalization.h
+  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/PNOConstructor.h
+  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/BoughtonPulayAlgorithm.h
+  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/DOIBasedSelecter.h
+  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/TNOConstructor.h
+  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/QuasiCanonicalPAODomainConstructor.h
+  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/PAOSelecter.h
+  ${PROJECT_SOURCE_DIR}/src/analysis/populationAnalysis/IAOPopulationCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/analysis/populationAnalysis/MullikenPopulationCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/analysis/populationAnalysis/HirshfeldPopulationCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/FosterBoysLocalization.h
   ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/SPADEAlgorithm.h
   ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/IBOLocalization.h
-  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/FosterBoysLocalization.h
-  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/OrbitalAligner.h
   ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/EdmistonRuedenbergLocalization.h
-  ${PROJECT_SOURCE_DIR}/src/analysis/localizationFunctions/ELFCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/NonOrthogonalLocalization.h
+  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/PipekMezeyLocalization.h
+  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/OrbitalAligner.h
+  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/Localization.h
   ${PROJECT_SOURCE_DIR}/src/analysis/localizationFunctions/SEDD.h
-  ${PROJECT_SOURCE_DIR}/src/analysis/populationAnalysis/HirshfeldPopulationCalculator.h
-  ${PROJECT_SOURCE_DIR}/src/analysis/populationAnalysis/MullikenPopulationCalculator.h
-  ${PROJECT_SOURCE_DIR}/src/analysis/populationAnalysis/IAOPopulationCalculator.h
-  ${PROJECT_SOURCE_DIR}/src/misc/BasisSetTruncationAlgorithms.h
-  ${PROJECT_SOURCE_DIR}/src/misc/SystemSplittingTools.h
-  ${PROJECT_SOURCE_DIR}/src/misc/Timing.h
-  ${PROJECT_SOURCE_DIR}/src/misc/HelperFunctions.h
-  ${PROJECT_SOURCE_DIR}/src/misc/FaTConvergenceAccelerator.h
-  ${PROJECT_SOURCE_DIR}/src/misc/VectorOnDiskStorageController.h
-  ${PROJECT_SOURCE_DIR}/src/misc/SerenityError.h
-  ${PROJECT_SOURCE_DIR}/src/misc/WarningTracker.h
-  ${PROJECT_SOURCE_DIR}/src/misc/RememberingFactory.h
-  ${PROJECT_SOURCE_DIR}/src/input/Input.h
+  ${PROJECT_SOURCE_DIR}/src/analysis/localizationFunctions/ELFCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/data/SpinPolarizedData.h
+  ${PROJECT_SOURCE_DIR}/src/data/PAOController.h
+  ${PROJECT_SOURCE_DIR}/src/data/OrbitalTriple.h
+  ${PROJECT_SOURCE_DIR}/src/data/SingleSubstitution.h
+  ${PROJECT_SOURCE_DIR}/src/data/OrbitalController.h
+  ${PROJECT_SOURCE_DIR}/src/data/SparseMapsController.h
+  ${PROJECT_SOURCE_DIR}/src/data/ElectronicStructure.h
+  ${PROJECT_SOURCE_DIR}/src/data/DoublySpinPolarizedData.h
+  ${PROJECT_SOURCE_DIR}/src/data/OrbitalPair.h
+  ${PROJECT_SOURCE_DIR}/src/data/matrices/CoefficientMatrix.h
+  ${PROJECT_SOURCE_DIR}/src/data/matrices/DensityMatrix.h
+  ${PROJECT_SOURCE_DIR}/src/data/matrices/FockMatrix.h
+  ${PROJECT_SOURCE_DIR}/src/data/matrices/MatrixInBasis.h
+  ${PROJECT_SOURCE_DIR}/src/data/matrices/DensityMatrixController.h
+  ${PROJECT_SOURCE_DIR}/src/data/matrices/SPMatrix.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/MatrixOperatorToGridTransformer.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/ExternalDensityOnGridController.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/CoulombPotentialOnGridCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/BasisFunctionOnGridControllerFactory.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGridFactory.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGrid.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/ScalarOperatorToMatrixAdder.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/SupersystemDensityOnGridController.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGridCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityMatrixDensityOnGridController.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/GridData.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/DifferentialOverlapIntegralCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/ElectrostaticPotentialOnGridController.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/CustomDensityOnGridController.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGridController.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/BasisFunctionOnGridController.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityAdder.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/MOCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/data/grid/GridPotential.h
+  ${PROJECT_SOURCE_DIR}/src/dft/Functional.h
+  ${PROJECT_SOURCE_DIR}/src/dft/dispersionCorrection/DispersionData.h
+  ${PROJECT_SOURCE_DIR}/src/dft/dispersionCorrection/DispersionRawData.h
+  ${PROJECT_SOURCE_DIR}/src/dft/dispersionCorrection/DispersionCorrectionCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/dft/functionals/FunctionalLibrary.h
+  ${PROJECT_SOURCE_DIR}/src/dft/functionals/CompositeFunctionals.h
+  ${PROJECT_SOURCE_DIR}/src/dft/functionals/BasicFunctionals.h
+  ${PROJECT_SOURCE_DIR}/src/dft/functionals/wrappers/PartialDerivatives.h
+  ${PROJECT_SOURCE_DIR}/src/dft/functionals/wrappers/LibXC.h
+  ${PROJECT_SOURCE_DIR}/src/dft/functionals/wrappers/XCFun.h
   ${PROJECT_SOURCE_DIR}/src/integrals/OneIntControllerFactory.h
   ${PROJECT_SOURCE_DIR}/src/integrals/OneElectronIntegralController.h
   ${PROJECT_SOURCE_DIR}/src/integrals/MO3CenterIntegralController.h
   ${PROJECT_SOURCE_DIR}/src/integrals/RI_J_IntegralController.h
-  ${PROJECT_SOURCE_DIR}/src/integrals/RI_J_IntegralControllerFactory.h
   ${PROJECT_SOURCE_DIR}/src/integrals/Normalization.h
-  ${PROJECT_SOURCE_DIR}/src/integrals/looper/CoulombInteractionIntLooper.h
+  ${PROJECT_SOURCE_DIR}/src/integrals/RI_J_IntegralControllerFactory.h
+  ${PROJECT_SOURCE_DIR}/src/integrals/transformer/Ao2MoTransformer.h
+  ${PROJECT_SOURCE_DIR}/src/integrals/transformer/Ao2MoHalfTransformer.h
+  ${PROJECT_SOURCE_DIR}/src/integrals/transformer/Ao2MoExchangeIntegralTransformer.h
   ${PROJECT_SOURCE_DIR}/src/integrals/looper/ExchangeInteractionIntLooper.h
-  ${PROJECT_SOURCE_DIR}/src/integrals/looper/ABTwoElecThreeCenterIntLooper.h
+  ${PROJECT_SOURCE_DIR}/src/integrals/looper/CoulombInteractionIntLooper.h
   ${PROJECT_SOURCE_DIR}/src/integrals/looper/TwoElecFourCenterIntLooper.h
   ${PROJECT_SOURCE_DIR}/src/integrals/looper/TwoElecThreeCenterIntLooper.h
+  ${PROJECT_SOURCE_DIR}/src/integrals/looper/ABTwoElecThreeCenterIntLooper.h
   ${PROJECT_SOURCE_DIR}/src/integrals/wrappers/Libint.h
   ${PROJECT_SOURCE_DIR}/src/integrals/wrappers/Libecpint.h
-  ${PROJECT_SOURCE_DIR}/src/integrals/transformer/Ao2MoHalfTransformer.h
-  ${PROJECT_SOURCE_DIR}/src/integrals/transformer/Ao2MoExchangeIntegralTransformer.h
-  ${PROJECT_SOURCE_DIR}/src/integrals/transformer/Ao2MoTransformer.h
-  ${PROJECT_SOURCE_DIR}/src/settings/LocalizationOptions.h
-  ${PROJECT_SOURCE_DIR}/src/settings/PCMSettings.h
-  ${PROJECT_SOURCE_DIR}/src/settings/Settings.h
-  ${PROJECT_SOURCE_DIR}/src/settings/MiscOptions.h
-  ${PROJECT_SOURCE_DIR}/src/settings/BasisOptions.h
-  ${PROJECT_SOURCE_DIR}/src/settings/Reflection.h
-  ${PROJECT_SOURCE_DIR}/src/settings/CorrelatedMethodsOptions.h
-  ${PROJECT_SOURCE_DIR}/src/settings/EmbeddingOptions.h
-  ${PROJECT_SOURCE_DIR}/src/settings/EmbeddingSettings.h
-  ${PROJECT_SOURCE_DIR}/src/settings/LRSCFOptions.h
-  ${PROJECT_SOURCE_DIR}/src/settings/GridOptions.h
-  ${PROJECT_SOURCE_DIR}/src/settings/ElectronicStructureOptions.h
-  ${PROJECT_SOURCE_DIR}/src/settings/SCFOptions.h
-  ${PROJECT_SOURCE_DIR}/src/settings/Options.h
-  ${PROJECT_SOURCE_DIR}/src/settings/PCMOptions.h
-  ${PROJECT_SOURCE_DIR}/src/settings/DFTOptions.h
-  ${PROJECT_SOURCE_DIR}/src/settings/GeometryOptions.h
-  ${PROJECT_SOURCE_DIR}/src/grid/GridControllerFactory.h
-  ${PROJECT_SOURCE_DIR}/src/grid/Grid.h
-  ${PROJECT_SOURCE_DIR}/src/grid/AtomCenteredGrid.h
-  ${PROJECT_SOURCE_DIR}/src/grid/GridController.h
-  ${PROJECT_SOURCE_DIR}/src/grid/HilbertRTreeSorting.h
-  ${PROJECT_SOURCE_DIR}/src/grid/AtomCenteredGridController.h
-  ${PROJECT_SOURCE_DIR}/src/grid/construction/GridFactory.h
-  ${PROJECT_SOURCE_DIR}/src/grid/construction/AtomGrid.h
-  ${PROJECT_SOURCE_DIR}/src/grid/construction/AtomGridFactory.h
-  ${PROJECT_SOURCE_DIR}/src/grid/construction/sphere_lebedev_rule.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/RIMP2.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/LocalMP2.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/MP2.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/OrbitalPairSelector.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/DipoleApproximationToPairEnergies.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/LRSCFController.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Kernel/Kernel.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Analysis/LRSCFAnalysis.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Analysis/ResponseProperties.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Analysis/ExcitationSpectrum.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Analysis/DipoleIntegrals.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/KSigmaVector.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/DeltaESigmaVector.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/KernelSigmaVector.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/EOSigmaVector.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/CoulombSigmaVector.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/SigmaVector.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/Besley.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/LRSCFSetup.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/ResponseSolver.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/IterativeSolver.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/EigenvalueSolver.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/CC/CCSD_T.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/CC/DLPNO_CCSD_T0.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/CC/DLPNO_CCSD.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/CC/CCSD.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/KLOrbitalSet.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/OrbitalPairDIISWrapper.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/LocalCorrelationController.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/CouplingOrbitalSet.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/LocalAOSigmaVectorWrapper.h
-  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/DomainOverlapMatrixController.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/DispersionCorrectionTask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/TDEmbeddingTask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/GradientTask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/FDETask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/MultipoleMomentTask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/CoupledClusterTask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/SystemSplittingTask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/Task.h
   ${PROJECT_SOURCE_DIR}/src/tasks/BasisSetTruncationTask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/GeometryOptimizationTask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/HessianTask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/EDATask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/EvaluateEnergyTask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/DummyTask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/TSTask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/ExportGridTask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/DispersionCorrectionTask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/ScfTask.h
   ${PROJECT_SOURCE_DIR}/src/tasks/ElectronicStructureCopyTask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/SystemAdditionTask.h
   ${PROJECT_SOURCE_DIR}/src/tasks/PlotTask.h
   ${PROJECT_SOURCE_DIR}/src/tasks/LRSCFTask.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/MP2Task.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/SystemSplittingTask.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/EDATask.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/SystemAdditionTask.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/Task.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/MultipoleMomentTask.h
   ${PROJECT_SOURCE_DIR}/src/tasks/FreezeAndThawTask.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/TSTask.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/MP2Task.h
   ${PROJECT_SOURCE_DIR}/src/tasks/LocalizationTask.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/ScfTask.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/EvaluateEnergyTask.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/GeometryOptimizationTask.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/ActiveSpaceSelectionTask.h
   ${PROJECT_SOURCE_DIR}/src/tasks/PopAnalysisTask.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/HessianTask.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/FDETask.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/TDEmbeddingTask.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/DummyTask.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/ExportGridTask.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/GradientTask.h
-  ${PROJECT_SOURCE_DIR}/src/tasks/CoupledClusterTask.h
-  ${PROJECT_SOURCE_DIR}/src/data/OrbitalPair.h
-  ${PROJECT_SOURCE_DIR}/src/data/ElectronicStructure.h
-  ${PROJECT_SOURCE_DIR}/src/data/SparseMapsController.h
-  ${PROJECT_SOURCE_DIR}/src/data/OrbitalController.h
-  ${PROJECT_SOURCE_DIR}/src/data/PAOController.h
-  ${PROJECT_SOURCE_DIR}/src/data/SingleSubstitution.h
-  ${PROJECT_SOURCE_DIR}/src/data/OrbitalTriple.h
-  ${PROJECT_SOURCE_DIR}/src/data/SpinPolarizedData.h
-  ${PROJECT_SOURCE_DIR}/src/data/DoublySpinPolarizedData.h
-  ${PROJECT_SOURCE_DIR}/src/data/matrices/DensityMatrix.h
-  ${PROJECT_SOURCE_DIR}/src/data/matrices/SPMatrix.h
-  ${PROJECT_SOURCE_DIR}/src/data/matrices/MatrixInBasis.h
-  ${PROJECT_SOURCE_DIR}/src/data/matrices/CoefficientMatrix.h
-  ${PROJECT_SOURCE_DIR}/src/data/matrices/DensityMatrixController.h
-  ${PROJECT_SOURCE_DIR}/src/data/matrices/FockMatrix.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/MOCalculator.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/ExternalDensityOnGridController.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/GridPotential.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/BasisFunctionOnGridController.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityMatrixDensityOnGridController.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityAdder.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/ScalarOperatorToMatrixAdder.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/SupersystemDensityOnGridController.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/BasisFunctionOnGridControllerFactory.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGrid.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGridCalculator.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/CoulombPotentialOnGridCalculator.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/GridData.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/ElectrostaticPotentialOnGridController.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/MatrixOperatorToGridTransformer.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGridFactory.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGridController.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/DifferentialOverlapIntegralCalculator.h
-  ${PROJECT_SOURCE_DIR}/src/data/grid/CustomDensityOnGridController.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/XyzFileToGeometryConverter.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/MolecularSurfaceController.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/DelleySurfaceConstructor.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/GeometryFactory.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/Geometry.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/GeometryFileReader.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/MolecularSurfaceFactory.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/Line.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/AtomType.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/GEPOLSurfaceConstructor.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/AtomTypeFactory.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/Plane.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/Triangle.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/Atom.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/Sphere.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/Point.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/Ellipse.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/NumericalHessianCalc.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/GeometryGradientCalculator.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/NumericalGeomGradCalc.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/HessianCalculator.h
-  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/CoreCoreRepulsionDerivative.h
-  ${PROJECT_SOURCE_DIR}/src/solvation/ContinuumModel.h
-  ${PROJECT_SOURCE_DIR}/src/solvation/Solvents.h
-  ${PROJECT_SOURCE_DIR}/src/notification/NotifyingClass.h
-  ${PROJECT_SOURCE_DIR}/src/notification/ObjectSensitiveClass.h
-  ${PROJECT_SOURCE_DIR}/src/math/RegularRankFourTensor.h
-  ${PROJECT_SOURCE_DIR}/src/math/ScalarProductMatrix.h
-  ${PROJECT_SOURCE_DIR}/src/math/Matrix.h
+  ${PROJECT_SOURCE_DIR}/src/tasks/ActiveSpaceSelectionTask.h
   ${PROJECT_SOURCE_DIR}/src/math/FloatMaths.h
-  ${PROJECT_SOURCE_DIR}/src/math/RankFourTensor.h
+  ${PROJECT_SOURCE_DIR}/src/math/IntegerMaths.h
   ${PROJECT_SOURCE_DIR}/src/math/VectorMaths.h
+  ${PROJECT_SOURCE_DIR}/src/math/Matrix.h
+  ${PROJECT_SOURCE_DIR}/src/math/ScalarProductMatrix.h
   ${PROJECT_SOURCE_DIR}/src/math/Derivatives.h
-  ${PROJECT_SOURCE_DIR}/src/math/IntegerMaths.h
-  ${PROJECT_SOURCE_DIR}/src/math/optimizer/SteepestDescent.h
-  ${PROJECT_SOURCE_DIR}/src/math/optimizer/NewtonRaphson.h
-  ${PROJECT_SOURCE_DIR}/src/math/optimizer/LBFGS.h
-  ${PROJECT_SOURCE_DIR}/src/math/optimizer/Optimizer.h
-  ${PROJECT_SOURCE_DIR}/src/math/optimizer/BFGS.h
+  ${PROJECT_SOURCE_DIR}/src/math/RankFourTensor.h
+  ${PROJECT_SOURCE_DIR}/src/math/RegularRankFourTensor.h
+  ${PROJECT_SOURCE_DIR}/src/math/saddlepoint/Bofill.h
+  ${PROJECT_SOURCE_DIR}/src/math/saddlepoint/QST.h
   ${PROJECT_SOURCE_DIR}/src/math/diis/ADIIS.h
   ${PROJECT_SOURCE_DIR}/src/math/diis/DIIS.h
-  ${PROJECT_SOURCE_DIR}/src/math/linearAlgebra/MatrixFunctions.h
-  ${PROJECT_SOURCE_DIR}/src/math/linearAlgebra/Orthogonalization.h
-  ${PROJECT_SOURCE_DIR}/src/math/linearAlgebra/JacobiRotation.h
+  ${PROJECT_SOURCE_DIR}/src/math/optimizer/Optimizer.h
+  ${PROJECT_SOURCE_DIR}/src/math/optimizer/SteepestDescent.h
+  ${PROJECT_SOURCE_DIR}/src/math/optimizer/BFGS.h
+  ${PROJECT_SOURCE_DIR}/src/math/optimizer/LBFGS.h
+  ${PROJECT_SOURCE_DIR}/src/math/optimizer/NewtonRaphson.h
   ${PROJECT_SOURCE_DIR}/src/math/linearAlgebra/DirectCD.h
+  ${PROJECT_SOURCE_DIR}/src/math/linearAlgebra/Orthogonalization.h
   ${PROJECT_SOURCE_DIR}/src/math/linearAlgebra/CholeskyDecomposer.h
-  ${PROJECT_SOURCE_DIR}/src/math/saddlepoint/Bofill.h
-  ${PROJECT_SOURCE_DIR}/src/math/saddlepoint/QST.h
-  ${PROJECT_SOURCE_DIR}/src/parameters/Constants.h
+  ${PROJECT_SOURCE_DIR}/src/math/linearAlgebra/MatrixFunctions.h
+  ${PROJECT_SOURCE_DIR}/src/math/linearAlgebra/JacobiRotation.h
+  ${PROJECT_SOURCE_DIR}/src/scf/ConvergenceController.h
+  ${PROJECT_SOURCE_DIR}/src/scf/Scf.h
+  ${PROJECT_SOURCE_DIR}/src/scf/SCFAnalysis.h
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/AtomicDensityGuessCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/InitialGuessFactory.h
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/DensityInitialGuessCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/HCoreGuessCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/SuperpositionOfAtomicPotentials.h
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/ExtendedHueckel.h
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/InitialGuessCalculator.h
+  ${PROJECT_SOURCE_DIR}/src/scf/damper/DynamicDamping.h
+  ${PROJECT_SOURCE_DIR}/src/scf/damper/Damper.h
+  ${PROJECT_SOURCE_DIR}/src/scf/damper/ArithmeticSeriesDamping.h
+  ${PROJECT_SOURCE_DIR}/src/scf/damper/StaticDamping.h
+  ${PROJECT_SOURCE_DIR}/src/grid/HilbertRTreeSorting.h
+  ${PROJECT_SOURCE_DIR}/src/grid/GridControllerFactory.h
+  ${PROJECT_SOURCE_DIR}/src/grid/AtomCenteredGrid.h
+  ${PROJECT_SOURCE_DIR}/src/grid/AtomCenteredGridController.h
+  ${PROJECT_SOURCE_DIR}/src/grid/GridController.h
+  ${PROJECT_SOURCE_DIR}/src/grid/Grid.h
+  ${PROJECT_SOURCE_DIR}/src/grid/construction/AtomGrid.h
+  ${PROJECT_SOURCE_DIR}/src/grid/construction/sphere_lebedev_rule.h
+  ${PROJECT_SOURCE_DIR}/src/grid/construction/GridFactory.h
+  ${PROJECT_SOURCE_DIR}/src/grid/construction/AtomGridFactory.h
+  ${PROJECT_SOURCE_DIR}/src/notification/NotifyingClass.h
+  ${PROJECT_SOURCE_DIR}/src/notification/ObjectSensitiveClass.h
+  ${PROJECT_SOURCE_DIR}/src/misc/SerenityError.h
+  ${PROJECT_SOURCE_DIR}/src/misc/Timing.h
+  ${PROJECT_SOURCE_DIR}/src/misc/VectorOnDiskStorageController.h
+  ${PROJECT_SOURCE_DIR}/src/misc/WarningTracker.h
+  ${PROJECT_SOURCE_DIR}/src/misc/FaTConvergenceAccelerator.h
+  ${PROJECT_SOURCE_DIR}/src/misc/HelperFunctions.h
+  ${PROJECT_SOURCE_DIR}/src/misc/BasisSetTruncationAlgorithms.h
+  ${PROJECT_SOURCE_DIR}/src/misc/RememberingFactory.h
+  ${PROJECT_SOURCE_DIR}/src/misc/SystemSplittingTools.h
+  ${PROJECT_SOURCE_DIR}/src/energies/EnergyContributions.h
+  ${PROJECT_SOURCE_DIR}/src/energies/EnergyComponentController.h
+  ${PROJECT_SOURCE_DIR}/src/energies/EnergyComponentPrinter.h
+  ${PROJECT_SOURCE_DIR}/src/input/Input.h
   ${PROJECT_SOURCE_DIR}/src/parameters/AtomicParameters.h
+  ${PROJECT_SOURCE_DIR}/src/parameters/Constants.h
+  ${PROJECT_SOURCE_DIR}/src/memory/MemoryManager.h
+  ${PROJECT_SOURCE_DIR}/src/memory/AvailableMemory.h
 )
 
 set(SERENITY_PYTHON_FILES
-  ${PROJECT_SOURCE_DIR}/src/system/SystemController_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/energies/EnergyContributions_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/Geometry_python.cpp
   ${PROJECT_SOURCE_DIR}/src/basis/BasisController_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/Options_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/Settings_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/EmbeddingSettings_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/system/SystemController_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/ElectronicStructure_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/matrices/DensityMatrixController_python.cpp
   ${PROJECT_SOURCE_DIR}/src/dft/functionals/CompositeFunctionals_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/python/serenipy.cpp
-  ${PROJECT_SOURCE_DIR}/src/misc/Timing_python.cpp
   ${PROJECT_SOURCE_DIR}/src/integrals/looper/Looper_python.cpp
   ${PROJECT_SOURCE_DIR}/src/integrals/wrappers/Libint_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/Options_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/EmbeddingSettings_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/Settings_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/grid/GridController_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/python/serenipy.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/MP2Task_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/DispersionCorrectionTask_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/ScfTask_python.cpp
   ${PROJECT_SOURCE_DIR}/src/tasks/PlotTask_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/TDEmbeddingTask_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/Task_python.cpp
   ${PROJECT_SOURCE_DIR}/src/tasks/MultipoleMomentTask_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/FreezeAndThawTask_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/GradientTask_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/DispersionCorrectionTask_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/MP2Task_python.cpp
   ${PROJECT_SOURCE_DIR}/src/tasks/FDETask_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/Task_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/CoupledClusterTask_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/FreezeAndThawTask_python.cpp
   ${PROJECT_SOURCE_DIR}/src/tasks/LocalizationTask_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/CoupledClusterTask_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/TDEmbeddingTask_python.cpp
   ${PROJECT_SOURCE_DIR}/src/tasks/GeometryOptimizationTask_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/ScfTask_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/ElectronicStructure_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/matrices/DensityMatrixController_python.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/Geometry_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/GradientTask_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/grid/GridController_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/misc/Timing_python.cpp
+  ${PROJECT_SOURCE_DIR}/src/energies/EnergyContributions_python.cpp
 )
 
 set(SERENITY_TEST_FILES
-  ${PROJECT_SOURCE_DIR}/src/system/SystemController_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/basis/Shell_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/basis/SphericalHarmonicsRotations_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/Sphere_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/Plane_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/AtomTypeFactory_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/Point_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/Geometry_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/GEPOLSurfaceConstructor_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/Triangle_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/Ellipse_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/AtomType_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/DelleySurfaceConstructor_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/Line_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/CoreCoreRepulsionDerivative_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/DomainOverlapMatrixController_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/LRSCFController_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Kernel/Kernel_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/SigmaVector_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/ResponseSolver_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/Besley_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/EigenvalueSolver_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/CC/DLPNO_CCSD_T0_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/CC/CC_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/CC/DLPNO_CCSD_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/RIMP2_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/MP2_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/LocalMP2_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/OrbitalPairSelector_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/DipoleApproximationToPairEnergies_test.cpp
   ${PROJECT_SOURCE_DIR}/src/basis/CartesianToSphericalTransformer_test.cpp
   ${PROJECT_SOURCE_DIR}/src/basis/BasisExtension_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/dft/functionals/CompositeFunctionals_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/dft/functionals/BasicFunctionals_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/dft/functionals/wrappers/XCFun_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/dft/functionals/wrappers/LibXC_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/dft/dispersionCorrection/DispersionCorrectionCalculator_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/Scf_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/HCoreGuessCalculator_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/AtomicDensityGuessCalculator_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/ExtendedHueckel_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/InitialGuessCalculator_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/SuperpositionOfAtomicPotentials_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/scf/damper/StaticDamping_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/io/Eigen3HDF5_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/PCMPotential_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/BUReconstructionPotential_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/CoulombInteractionPotential_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/ECPInteractionPotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/basis/Shell_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/basis/SphericalHarmonicsRotations_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/settings/Settings_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/ZeroPotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/HuzinagaFDEProjectionPotential_test.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/NAddFuncPotential_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/HCorePotential_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/HoffmannProjectionPotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/BUReconstructionPotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/PCMPotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/LRXPotential_test.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/EffectiveCorePotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/SAOPPotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/CoulombInteractionPotential_test.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/OptEffPotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/ExchangePotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/HoffmannProjectionPotential_test.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/CoulombPotential_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/HuzinagaFDEProjectionPotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/FuncPotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/ECPInteractionPotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/ERIPotential_test.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/ExchangeInteractionPotential_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/LRXPotential_test.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/NEInteractionPotential_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/ExchangePotential_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/ERIPotential_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/SAOPPotential_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/ZeroPotential_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/FuncPotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/HCorePotential_test.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABFuncPotential_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABExchangePotential_test.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABNAddFuncPotential_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABCoulombInteractionPotential_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABCoreHamiltonian_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABZeroPotential_test.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABLRExchangePotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABCoulombInteractionPotential_test.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABERIPotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABExchangePotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABZeroPotential_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/potentials/ABFockMatrixConstruction/ABCoreHamiltonian_test.cpp
   ${PROJECT_SOURCE_DIR}/src/potentials/bundles/EDAPotentials_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/memory/MemoryManager_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/BoughtonPulayAlgorithm_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/DOIBasedSelecter_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/io/Eigen3HDF5_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/testsupply/GridController__TEST_SUPPLY.h
+  ${PROJECT_SOURCE_DIR}/src/testsupply/SystemController__TEST_SUPPLY.h
+  ${PROJECT_SOURCE_DIR}/src/testsupply/SystemController__TEST_SUPPLY.cpp
+  ${PROJECT_SOURCE_DIR}/src/testsupply/BasisController__TEST_SUPPLY.h
+  ${PROJECT_SOURCE_DIR}/src/testsupply/GridController__TEST_SUPPLY.cpp
+  ${PROJECT_SOURCE_DIR}/src/testsupply/BasisController__TEST_SUPPLY.cpp
+  ${PROJECT_SOURCE_DIR}/src/system/SystemController_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/multipoles/MultipoleMomentCalculator_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/multipoles/NumericalDipoleMomentCalculator_test.cpp
   ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/TNOConstructor_test.cpp
   ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/QuasiCanonicalPAODomainConstructor_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/BoughtonPulayAlgorithm_test.cpp
   ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/PNOConstructor_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/multipoles/MultipoleMomentCalculator_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/multipoles/NumericalDipoleMomentCalculator_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/OrbitalAligner_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/PipekMezeyLocalization_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/FosterBoysLocalization_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/EdmistonRuedenbergLocalization_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/NonOrthogonalLocalization_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/IBOLocalization_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/localizationFunctions/SEDD_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/analysis/localizationFunctions/ELFCalculator_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/PAOSelection/DOIBasedSelecter_test.cpp
   ${PROJECT_SOURCE_DIR}/src/analysis/populationAnalysis/MullikenPopulationCalculator_test.cpp
   ${PROJECT_SOURCE_DIR}/src/analysis/populationAnalysis/IAOPopulationCalculator_test.cpp
   ${PROJECT_SOURCE_DIR}/src/analysis/populationAnalysis/HirshfeldPopulationCalculator_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/misc/VectorOnDiskStorageController_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/misc/RememberingFactory_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/misc/SerenityError_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/integrals/MO3CenterIntegralController_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/integrals/wrappers/Libint_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/integrals/transformer/Ao2MoExchangeIntegralTransformer_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/integrals/transformer/Ao2MoHalfTransformer_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/integrals/transformer/Ao2MoTransformer_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/settings/Settings_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/testsupply/GridController__TEST_SUPPLY.cpp
-  ${PROJECT_SOURCE_DIR}/src/testsupply/GridController__TEST_SUPPLY.h
-  ${PROJECT_SOURCE_DIR}/src/testsupply/BasisController__TEST_SUPPLY.cpp
-  ${PROJECT_SOURCE_DIR}/src/testsupply/SystemController__TEST_SUPPLY.h
-  ${PROJECT_SOURCE_DIR}/src/testsupply/SystemController__TEST_SUPPLY.cpp
-  ${PROJECT_SOURCE_DIR}/src/testsupply/BasisController__TEST_SUPPLY.h
-  ${PROJECT_SOURCE_DIR}/src/grid/HilbertRTreeSorting_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/grid/construction/sphere_lebedev_rule_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/grid/construction/AtomGridFactory_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/grid/construction/GridFactory_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/DipoleApproximationToPairEnergies_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/LocalMP2_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/MP2_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/RIMP2_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/MPn/OrbitalPairSelector_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/LRSCFController_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Kernel/Kernel_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/SigmaVectors/SigmaVector_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/Besley_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/ResponseSolver_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LRSCF/Tools/EigenvalueSolver_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/CC/CC_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/CC/DLPNO_CCSD_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/CC/DLPNO_CCSD_T0_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/postHF/LocalCorrelation/DomainOverlapMatrixController_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/TSTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/MultipoleMomentTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/MP2Task_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/BasisSetTruncationTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/HessianTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/ElectronicStructureCopyTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/FDETask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/EvaluateEnergyTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/LRSCFTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/FreezeAndThawTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/SystemSplittingTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/TDEmbeddingTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/GradientTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/ActiveSpaceSelectionTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/DispersionCorrectionTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/ScfTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/CoupledClusterTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/SystemAdditionTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/PopAnalysisTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/PlotTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/EDATask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/GeometryOptimizationTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/tasks/ExportGridTask_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/OrbitalTriple_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/OrbitalPair_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/IBOLocalization_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/FosterBoysLocalization_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/OrbitalAligner_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/NonOrthogonalLocalization_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/EdmistonRuedenbergLocalization_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/orbitalLocalization/PipekMezeyLocalization_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/localizationFunctions/ELFCalculator_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/analysis/localizationFunctions/SEDD_test.cpp
   ${PROJECT_SOURCE_DIR}/src/data/OrbitalController_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/OrbitalTriple_test.cpp
   ${PROJECT_SOURCE_DIR}/src/data/SpinPolarizedData_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/matrices/CoefficientMatrix_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/matrices/MatrixInBasis_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/matrices/DensityMatrix_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/OrbitalPair_test.cpp
   ${PROJECT_SOURCE_DIR}/src/data/matrices/DensityMatrixController_test.cpp
   ${PROJECT_SOURCE_DIR}/src/data/matrices/FockMatrix_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGrid_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/BasisFunctionOnGridController_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityAdder_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/matrices/DensityMatrix_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/matrices/CoefficientMatrix_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/matrices/MatrixInBasis_test.cpp
   ${PROJECT_SOURCE_DIR}/src/data/grid/DifferentialOverlapIntegralCalculator_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/BasisFunctionOnGridController_test.cpp
   ${PROJECT_SOURCE_DIR}/src/data/grid/ScalarOperatorToMatrixAdder_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/MOCalculator_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityMatrixDensityOnGridController_test.cpp
   ${PROJECT_SOURCE_DIR}/src/data/grid/SupersystemDensityOnGridController_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/CoulombPotentialOnGridCalculator_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/ExternalDensityOnGridController_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/ElectrostaticPotentialOnGridController_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGrid_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/MOCalculator_test.cpp
   ${PROJECT_SOURCE_DIR}/src/data/grid/GridPotential_test.cpp
   ${PROJECT_SOURCE_DIR}/src/data/grid/DensityOnGridCalculator_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityMatrixDensityOnGridController_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/ExternalDensityOnGridController_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/ElectrostaticPotentialOnGridController_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/DensityAdder_test.cpp
   ${PROJECT_SOURCE_DIR}/src/data/grid/GridData_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/Sphere_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/AtomType_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/Line_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/GEPOLSurfaceConstructor_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/AtomTypeFactory_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/Triangle_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/DelleySurfaceConstructor_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/Geometry_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/Point_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/Plane_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/Ellipse_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/geometry/gradients/CoreCoreRepulsionDerivative_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/math/IntegerMaths_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/data/grid/CoulombPotentialOnGridCalculator_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/dft/dispersionCorrection/DispersionCorrectionCalculator_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/dft/functionals/BasicFunctionals_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/dft/functionals/CompositeFunctionals_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/dft/functionals/wrappers/XCFun_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/dft/functionals/wrappers/LibXC_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/integrals/MO3CenterIntegralController_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/integrals/transformer/Ao2MoHalfTransformer_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/integrals/transformer/Ao2MoExchangeIntegralTransformer_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/integrals/transformer/Ao2MoTransformer_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/integrals/wrappers/Libint_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/CoupledClusterTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/BasisSetTruncationTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/TDEmbeddingTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/SystemAdditionTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/GeometryOptimizationTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/MultipoleMomentTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/EDATask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/ExportGridTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/ElectronicStructureCopyTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/GradientTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/FreezeAndThawTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/TSTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/SystemSplittingTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/ScfTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/LRSCFTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/FDETask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/EvaluateEnergyTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/MP2Task_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/HessianTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/PlotTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/DispersionCorrectionTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/ActiveSpaceSelectionTask_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/tasks/PopAnalysisTask_test.cpp
   ${PROJECT_SOURCE_DIR}/src/math/RegularRankFourTensor_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/math/Matrix_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/math/ScalarProductMatrix_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/math/RankFourTensor_test.cpp
   ${PROJECT_SOURCE_DIR}/src/math/Derivatives_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/math/FloatMaths_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/math/RankFourTensor_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/math/IntegerMaths_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/math/ScalarProductMatrix_test.cpp
   ${PROJECT_SOURCE_DIR}/src/math/VectorMaths_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/math/optimizer/SteepestDescent_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/math/optimizer/BFGS_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/math/Matrix_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/math/FloatMaths_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/math/saddlepoint/Bofill_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/math/saddlepoint/QST_test.cpp
   ${PROJECT_SOURCE_DIR}/src/math/optimizer/NewtonRaphson_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/math/linearAlgebra/DirectCD_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/math/optimizer/BFGS_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/math/optimizer/SteepestDescent_test.cpp
   ${PROJECT_SOURCE_DIR}/src/math/linearAlgebra/MatrixFunctions_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/math/linearAlgebra/DirectCD_test.cpp
   ${PROJECT_SOURCE_DIR}/src/math/linearAlgebra/JacobiRotation_test.cpp
   ${PROJECT_SOURCE_DIR}/src/math/linearAlgebra/CholeskyDecomposer_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/math/saddlepoint/QST_test.cpp
-  ${PROJECT_SOURCE_DIR}/src/math/saddlepoint/Bofill_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/Scf_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/InitialGuessCalculator_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/ExtendedHueckel_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/HCoreGuessCalculator_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/SuperpositionOfAtomicPotentials_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/initialGuess/AtomicDensityGuessCalculator_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/scf/damper/StaticDamping_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/grid/HilbertRTreeSorting_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/grid/construction/AtomGridFactory_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/grid/construction/GridFactory_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/grid/construction/sphere_lebedev_rule_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/misc/RememberingFactory_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/misc/VectorOnDiskStorageController_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/misc/SerenityError_test.cpp
+  ${PROJECT_SOURCE_DIR}/src/memory/MemoryManager_test.cpp
 )
 
diff --git a/src/analysis/PAOSelection/PNOConstructor.h b/src/analysis/PAOSelection/PNOConstructor.h
index aeeb075..12e6c5b 100644
--- a/src/analysis/PAOSelection/PNOConstructor.h
+++ b/src/analysis/PAOSelection/PNOConstructor.h
@@ -110,7 +110,7 @@ class PNOConstructor : public QuasiCanonicalPAODomainConstructor {
    * @brief Constructs PNOs and transforms amplitudes and exchange integrals to the PNO basis.
    * @param pair The pair.
    */
-  virtual void postProcessing(std::shared_ptr<OrbitalPair> pair);
+  virtual void postProcessing(std::shared_ptr<OrbitalPair> pair) override;
   /**
    * @brief Transforms the PAO basis of the given pairs to their significant (quasi-canonical) PNO basis.
    * @param orbitalPairs  The orbital pairs.
diff --git a/src/basis/AtomCenteredBasisController.cpp b/src/basis/AtomCenteredBasisController.cpp
index e3f01f2..848eb0f 100644
--- a/src/basis/AtomCenteredBasisController.cpp
+++ b/src/basis/AtomCenteredBasisController.cpp
@@ -42,21 +42,15 @@ AtomCenteredBasisController::AtomCenteredBasisController(std::shared_ptr<const G
     _makePrimary(makePrimary),
     _firstECP(firstECP) {
   assert(_geometry);
-  unsigned int nAtom = 0;
-  for (auto atom : geometry->getAtoms()) {
-    BasisLoadingData tmp;
-    tmp.label = basisLabel.empty() ? atom->getPrimaryBasisLabel() : _basisLabel;
-    tmp.ecp = false;
-    tmp.shells = importantShells.size() == 0 ? Eigen::VectorXi(0) : importantShells[nAtom];
-    _basisLoadingData.push_back(tmp);
-    nAtom++;
-  }
-  // TODO The lazy creation of a basis got lost due to the implementation of ECPs
+  _geometry->addSensitiveObject(this->ObjectSensitiveClass<Geometry>::_self);
+  resetBasisLoadingData(importantShells);
   produceBasis();
 }
 
 std::unique_ptr<Basis> AtomCenteredBasisController::produceBasisFunctionVector() {
   auto basis = std::unique_ptr<Basis>(new Basis());
+  if (_basisLoadingData.size() == 0)
+    resetBasisLoadingData();
   // Add new basis functions to the atoms
   unsigned int atomCount = 0;
   for (const auto& atom : _geometry->getAtoms()) {
@@ -157,8 +151,27 @@ void AtomCenteredBasisController::fromHDF5(std::string fBaseName, std::string id
   }
   // Delete old basis vector in order to work with the basis read from disk.
   this->_basis = nullptr;
-  this->notify();
+  this->BasisController::notify();
   file.close();
 }
 
+void AtomCenteredBasisController::notify() {
+  this->_basis = nullptr;
+  this->BasisController::notify();
+  resetBasisLoadingData();
+}
+
+void AtomCenteredBasisController::resetBasisLoadingData(const std::vector<Eigen::VectorXi>& importantShells) {
+  _basisLoadingData.clear();
+  unsigned int nAtom = 0;
+  for (auto atom : _geometry->getAtoms()) {
+    BasisLoadingData tmp;
+    tmp.label = _basisLabel.empty() ? atom->getPrimaryBasisLabel() : _basisLabel;
+    tmp.ecp = false;
+    tmp.shells = importantShells.size() == 0 ? Eigen::VectorXi(0) : importantShells[nAtom];
+    _basisLoadingData.push_back(tmp);
+    nAtom++;
+  }
+}
+
 } /* namespace Serenity */
diff --git a/src/basis/AtomCenteredBasisController.h b/src/basis/AtomCenteredBasisController.h
index 1eb8c39..a569fa6 100644
--- a/src/basis/AtomCenteredBasisController.h
+++ b/src/basis/AtomCenteredBasisController.h
@@ -38,7 +38,7 @@ class AtomCenteredBasisFactory;
  * This information is e.g. used in a Mulliken population analysis, or when calculating gradients
  * (with respect to the atomic coordinates).
  */
-class AtomCenteredBasisController : public BasisController {
+class AtomCenteredBasisController : public BasisController, public ObjectSensitiveClass<Geometry> {
   friend class BasisController__TEST_SUPPLY;
 
   struct BasisLoadingData {
@@ -120,6 +120,8 @@ class AtomCenteredBasisController : public BasisController {
     return _basisLoadingData;
   }
 
+  void notify() override;
+
  private:
   std::unique_ptr<Basis> produceBasisFunctionVector() override final;
   void postConstruction() override final;
@@ -135,6 +137,8 @@ class AtomCenteredBasisController : public BasisController {
   std::vector<std::pair<unsigned int, unsigned int>> _basisIndicesOfAtom;
   std::vector<std::pair<unsigned int, unsigned int>> _basisIndicesRedOfAtom;
 
+  void resetBasisLoadingData(const std::vector<Eigen::VectorXi>& importantShells = {});
+
   /*
    * This private constructor is for testing purposes only
    */
diff --git a/src/basis/BasisController.cpp b/src/basis/BasisController.cpp
index c8362ad..597c7af 100644
--- a/src/basis/BasisController.cpp
+++ b/src/basis/BasisController.cpp
@@ -150,4 +150,10 @@ const SparseMap& BasisController::getFunctionToShellMap() {
   return *_functionToShellMap;
 }
 
+void BasisController::notify() {
+  this->notifyObjects();
+  this->_shellPairList = nullptr;
+  this->_RIPrescreeningFactors = nullptr;
+}
+
 } /* namespace Serenity */
diff --git a/src/basis/BasisController.h b/src/basis/BasisController.h
index 245f82b..888ed04 100644
--- a/src/basis/BasisController.h
+++ b/src/basis/BasisController.h
@@ -201,11 +201,10 @@ class BasisController : public NotifyingClass<Basis>, public ObjectSensitiveClas
       produceBasis();
     return _maxAngularMomentum;
   }
-  void notify() {
-    this->notifyObjects();
-    this->_shellPairList = nullptr;
-    this->_RIPrescreeningFactors = nullptr;
-  }
+  /**
+   * @brief Reset shellPairList, prescreening factors and notifies depending objects.
+   */
+  void notify();
   /**
    * @returns true iff all basis function shells are cartesian
    */
diff --git a/src/basis/CartesianToSphericalTransformer.h b/src/basis/CartesianToSphericalTransformer.h
index e9dc427..21ee9ff 100644
--- a/src/basis/CartesianToSphericalTransformer.h
+++ b/src/basis/CartesianToSphericalTransformer.h
@@ -53,7 +53,7 @@ class CartesianToSphericalTransformer {
   /* Worker functions */
   // The normalization facotr N^S_lm
   // Implements eq. 6.4.49 p. 215 Helgaker, Jørgensen, Olsen
-  static constexpr double norm(unsigned int l, unsigned int abs_m) {
+  static double norm(unsigned int l, unsigned int abs_m) {
     return sqrt(2 * factorial(l + abs_m) * factorial(l - abs_m) / ((abs_m == 0) ? 2 : 1)) / (intPow(2, abs_m) * factorial(l));
   }
   // The transformation coefficient C^(lm)_(tuv).
diff --git a/src/config.cmake.in b/src/config.cmake.in
index 6569ac5..11e882e 100644
--- a/src/config.cmake.in
+++ b/src/config.cmake.in
@@ -1,12 +1,55 @@
 include(CMakeFindDependencyMacro)
 
+set(_HDF5_USE_STATIC_LIBRARIES ${HDF5_USE_STATIC_LIBRARIES})
+set(HDF5_USE_STATIC_LIBRARIES @HDF5_USE_STATIC_LIBRARIES@)
 find_dependency(HDF5 REQUIRED COMPONENTS HL CXX)
+# The following if is a small helper for systems
+#  that have HDF5 installed but do not have the
+#  cmake files installed (this seems common for
+#  many distributions)
+if (HDF5_USE_STATIC_LIBRARIES)
+  set(HDF5_TARGET hdf5_cpp-static)
+else()
+  set(HDF5_TARGET hdf5_cpp-shared)
+endif()
+if(NOT TARGET ${HDF5_TARGET})
+  add_library(${HDF5_TARGET} INTERFACE IMPORTED)
+  set_target_properties(${HDF5_TARGET} PROPERTIES
+    INTERFACE_LINK_LIBRARIES "${HDF5_LIBRARIES}"
+    INTERFACE_INCLUDE_DIRECTORIES "${HDF5_INCLUDE_DIRS}"
+  )
+endif()
+
+# Ensure that the include directory set by HDF5 contains hdf5.h
+get_target_property(_hdf5_include_dirs ${HDF5_TARGET} INTERFACE_INCLUDE_DIRECTORIES)
+set(_has_hdf5_h FALSE)
+foreach(_hdf5_include_dir ${_hdf5_include_dirs})
+  if(EXISTS ${_hdf5_include_dir}/hdf5.h)
+    set(_has_hdf5_h TRUE)
+    break()
+  endif()
+
+  # Try looking for a hdf5 directory within the include directory
+  if(EXISTS ${_hdf5_include_dir}/hdf5/hdf5.h)
+    set_target_properties(${HDF5_TARGET} PROPERTIES
+      INTERFACE_INCLUDE_DIRECTORIES ${_hdf5_include_dir}/hdf5
+    )
+    set(_has_hdf5_h TRUE)
+    break()
+  endif()
+endforeach()
+if(NOT _has_hdf5_h)
+  message(FATAL_ERROR "Could not find hdf5.h in HDF's include directorie: ${_hdf5_include_dirs}")
+endif()
+unset(_has_hdf5_h)
+unset(_hdf5_include_dirs)
+
 find_dependency(Eigen3 REQUIRED)
 find_dependency(OpenMP REQUIRED)
 find_dependency(Boost REQUIRED)
+find_dependency(Libint2 REQUIRED)
 if(NOT @BUILD_SHARED_LIBS@)
   find_dependency(ecpint REQUIRED)
-  find_dependency(Libint2 REQUIRED)
   if(@SERENITY_USE_XCFUN@)
     find_dependency(XCFun REQUIRED)
   endif()
diff --git a/src/data/OrbitalController.h b/src/data/OrbitalController.h
index 42cd133..9a55c24 100644
--- a/src/data/OrbitalController.h
+++ b/src/data/OrbitalController.h
@@ -24,7 +24,6 @@
 #include "data/SpinPolarizedData.h"
 #include "data/matrices/CoefficientMatrix.h"
 #include "data/matrices/FockMatrix.h"
-#include "io/HDF5.h"
 #include "notification/NotifyingClass.h"
 #include "settings/Options.h"
 /* Include Std and External Headers */
diff --git a/src/data/OrbitalPair.h b/src/data/OrbitalPair.h
index d2d4d6e..8609ef8 100644
--- a/src/data/OrbitalPair.h
+++ b/src/data/OrbitalPair.h
@@ -23,16 +23,22 @@
 /* Include Serenity Internal Headers */
 #include "math/Matrix.h" //Four index objects.
 /* Include Std and External Headers */
-#include "io/HDF5.h"        // Writing to file.
 #include <Eigen/Dense>      // Dense matrices.
 #include <Eigen/SparseCore> // Sparse matrices.
 #include <memory>           // smrt_ptr
 #include <string>           // Integral file names.
 #include <vector>           // std::vector
 
+namespace H5 {
+class H5File;
+} // namespace H5
+
 namespace Serenity {
 
 /* Forward Declarations */
+namespace HDF5 {
+using H5File = H5::H5File;
+} // namespace HDF5
 class SingleSubstitution;
 class CouplingOrbitalSet;
 class KLOrbitalSet;
diff --git a/src/data/grid/DensityMatrixDensityOnGridController.h b/src/data/grid/DensityMatrixDensityOnGridController.h
index 9a15ff7..8e9f212 100644
--- a/src/data/grid/DensityMatrixDensityOnGridController.h
+++ b/src/data/grid/DensityMatrixDensityOnGridController.h
@@ -111,19 +111,19 @@ class DensityMatrixDensityOnGridController : public ObjectSensitiveClass<Density
    *        Note that the grid may become extremely sparsely occupied during
    *        embedding calculations.
    */
-  virtual Eigen::SparseVector<int> getNonNegligibleBlocks() {
+  virtual Eigen::SparseVector<int> getNonNegligibleBlocks() override {
     return _densOnGridCalculator->getNonNegligibleBlocks();
   }
   /**
    * @brief Getter for the number of blocks.
    */
-  virtual unsigned int getNBlocks() {
+  virtual unsigned int getNBlocks() override {
     return _densOnGridCalculator->getBasisFunctionOnGridController()->getNBlocks();
   }
   /**
    * @brief Getter for the maximum block size.
    */
-  virtual unsigned int getMaxBlockSize() {
+  virtual unsigned int getMaxBlockSize() override {
     return _densOnGridCalculator->getBasisFunctionOnGridController()->getMaxBlockSize();
   }
 
diff --git a/src/data/grid/ElectrostaticPotentialOnGridController.h b/src/data/grid/ElectrostaticPotentialOnGridController.h
index 80be98f..9e0fbaf 100644
--- a/src/data/grid/ElectrostaticPotentialOnGridController.h
+++ b/src/data/grid/ElectrostaticPotentialOnGridController.h
@@ -29,7 +29,15 @@
 #include <memory>
 #include <string>
 
+namespace H5 {
+class H5File;
+} // namespace H5
+
 namespace Serenity {
+namespace HDF5 {
+using H5File = H5::H5File;
+} // namespace HDF5
+
 class GridController;
 template<Options::SCF_MODES T>
 class DensityMatrixController;
diff --git a/src/data/matrices/DensityMatrixController.h b/src/data/matrices/DensityMatrixController.h
index fbe1de2..68ee65d 100644
--- a/src/data/matrices/DensityMatrixController.h
+++ b/src/data/matrices/DensityMatrixController.h
@@ -23,7 +23,6 @@
 
 /* Include Serenity Internal Headers */
 #include "data/matrices/DensityMatrix.h"
-#include "io/HDF5.h"
 #include "notification/NotifyingClass.h"
 
 namespace Serenity {
diff --git a/src/data/matrices/MatrixInBasis.cpp b/src/data/matrices/MatrixInBasis.cpp
new file mode 100644
index 0000000..fef78d0
--- /dev/null
+++ b/src/data/matrices/MatrixInBasis.cpp
@@ -0,0 +1,41 @@
+/**
+ * @file   MatrixInBasis.cpp
+ * @author Jan Unsleber
+ * @date   Sep 24, 2020
+ * @copyright \n
+ *  This file is part of the program Serenity.\n\n
+ *  Serenity is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU Lesser General Public License as
+ *  published by the Free Software Foundation, either version 3 of
+ *  the License, or (at your option) any later version.\n\n
+ *  Serenity is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.\n\n
+ *  You should have received a copy of the GNU Lesser General
+ *  Public License along with Serenity.
+ *  If not, see <http://www.gnu.org/licenses/>.\n
+ */
+
+#include "data/matrices/MatrixInBasis.h"
+
+#include "io/HDF5.h"
+
+namespace Serenity {
+
+void MatrixInBasis<UNRESTRICTED>::toHDF5(std::string fBaseName, std::string matrixName) {
+  std::string name = fBaseName + ".mat.h5";
+  HDF5::H5File file(name.c_str(), H5F_ACC_TRUNC);
+  HDF5::save(file, matrixName.c_str(), this->alpha);
+  HDF5::save(file, matrixName.c_str(), this->beta);
+  HDF5::save_scalar_attribute(file, "basisSetName", _basisController->getBasisString());
+}
+
+void MatrixInBasis<RESTRICTED>::toHDF5(std::string fBaseName, std::string matrixName) {
+  std::string name = fBaseName + ".mat.h5";
+  HDF5::H5File file(name.c_str(), H5F_ACC_TRUNC);
+  HDF5::save(file, matrixName.c_str(), *this);
+  HDF5::save_scalar_attribute(file, "basisSetName", _basisController->getBasisString());
+}
+
+} /* namespace Serenity */
diff --git a/src/data/matrices/MatrixInBasis.h b/src/data/matrices/MatrixInBasis.h
index 221c83a..3854c4a 100644
--- a/src/data/matrices/MatrixInBasis.h
+++ b/src/data/matrices/MatrixInBasis.h
@@ -22,7 +22,6 @@
 #include "basis/BasisController.h"
 #include "data/SpinPolarizedData.h"
 #include "data/matrices/SPMatrix.h"
-#include "io/HDF5.h"
 /* Include Std and External Headers */
 #include <Eigen/Dense>
 #include <memory>
@@ -89,12 +88,7 @@ class MatrixInBasis<Options::SCF_MODES::RESTRICTED> : public SPMatrix<Options::S
    * @param fBaseName  The base name of the HDF5 file
    * @param matrixName The name of the dataset inside the file, optional.
    */
-  void toHDF5(std::string fBaseName, std::string matrixName) {
-    std::string name = fBaseName + ".mat.h5";
-    HDF5::H5File file(name.c_str(), H5F_ACC_TRUNC);
-    HDF5::save(file, matrixName.c_str(), *this);
-    HDF5::save_scalar_attribute(file, "basisSetName", _basisController->getBasisString());
-  }
+  void toHDF5(std::string fBaseName, std::string matrixName);
   /**
    * @returns The controller for the basis in which this matrix is defined.
    */
@@ -311,13 +305,7 @@ class MatrixInBasis<Options::SCF_MODES::UNRESTRICTED> : public SPMatrix<Options:
    * @param fBaseName  The base name of the HDF5 file
    * @param matrixName The name of the dataset inside the file, optional.
    */
-  void toHDF5(std::string fBaseName, std::string matrixName) {
-    std::string name = fBaseName + ".mat.h5";
-    HDF5::H5File file(name.c_str(), H5F_ACC_TRUNC);
-    HDF5::save(file, matrixName.c_str(), this->alpha);
-    HDF5::save(file, matrixName.c_str(), this->beta);
-    HDF5::save_scalar_attribute(file, "basisSetName", _basisController->getBasisString());
-  }
+  void toHDF5(std::string fBaseName, std::string matrixName);
   /**
    * @returns The controller for the basis in which this matrix is defined.
    */
diff --git a/src/data/matrices/SPMatrix.cpp b/src/data/matrices/SPMatrix.cpp
new file mode 100644
index 0000000..14f1707
--- /dev/null
+++ b/src/data/matrices/SPMatrix.cpp
@@ -0,0 +1,42 @@
+/**
+ * @file   SPMatrix.cpp
+ * @author Jan Unsleber
+ * @date   September 24, 2020
+ * @copyright \n
+ *  This file is part of the program Serenity.\n\n
+ *  Serenity is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU Lesser General Public License as
+ *  published by the Free Software Foundation, either version 3 of
+ *  the License, or (at your option) any later version.\n\n
+ *  Serenity is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.\n\n
+ *  You should have received a copy of the GNU Lesser General
+ *  Public License along with Serenity.
+ *  If not, see <http://www.gnu.org/licenses/>.\n
+ */
+
+#include "data/matrices/SPMatrix.h"
+
+/* Include Serenity Internal Headers */
+#include "io/HDF5.h"
+
+namespace Serenity {
+
+template<>
+void SPMatrix<Options::SCF_MODES::RESTRICTED>::toHDF5(std::string fBaseName, std::string matrixName) {
+  std::string name = fBaseName + ".mat.h5";
+  HDF5::H5File file(name.c_str(), H5F_ACC_TRUNC);
+  HDF5::save(file, matrixName.c_str(), *this);
+}
+
+template<>
+void SPMatrix<Options::SCF_MODES::UNRESTRICTED>::toHDF5(std::string fBaseName, std::string matrixName) {
+  std::string name = fBaseName + ".mat.h5";
+  HDF5::H5File file(name.c_str(), H5F_ACC_TRUNC);
+  HDF5::save(file, matrixName.c_str(), this->alpha);
+  HDF5::save(file, matrixName.c_str(), this->beta);
+}
+
+} // namespace Serenity
diff --git a/src/data/matrices/SPMatrix.h b/src/data/matrices/SPMatrix.h
index 54f24df..cd8a992 100644
--- a/src/data/matrices/SPMatrix.h
+++ b/src/data/matrices/SPMatrix.h
@@ -20,7 +20,6 @@
 #define SPMATRIX_H
 /* Include Serenity Internal Headers */
 #include "data/SpinPolarizedData.h"
-#include "io/HDF5.h"
 /* Include Std and External Headers */
 #include <Eigen/Dense>
 #include <memory>
@@ -62,11 +61,7 @@ class SPMatrix<Options::SCF_MODES::RESTRICTED> : public Eigen::MatrixXd {
    * @param fBaseName  The base name of the HDF5 file
    * @param matrixName The name of the dataset inside the file, optional.
    */
-  void toHDF5(std::string fBaseName, std::string matrixName) {
-    std::string name = fBaseName + ".mat.h5";
-    HDF5::H5File file(name.c_str(), H5F_ACC_TRUNC);
-    HDF5::save(file, matrixName.c_str(), *this);
-  }
+  void toHDF5(std::string fBaseName, std::string matrixName);
   /**
    * @brief Total data.
    * @return Returns the sum of alpha an beta..
@@ -226,12 +221,7 @@ class SPMatrix<Options::SCF_MODES::UNRESTRICTED> {
    * @param fBaseName  The base name of the HDF5 file
    * @param matrixName The name of the dataset inside the file, optional.
    */
-  void toHDF5(std::string fBaseName, std::string matrixName) {
-    std::string name = fBaseName + ".mat.h5";
-    HDF5::H5File file(name.c_str(), H5F_ACC_TRUNC);
-    HDF5::save(file, matrixName.c_str(), this->alpha);
-    HDF5::save(file, matrixName.c_str(), this->beta);
-  }
+  void toHDF5(std::string fBaseName, std::string matrixName);
   /**
    * @brief Total data.
    * @return Returns the sum of alpha an beta..
diff --git a/src/geometry/Atom.h b/src/geometry/Atom.h
index 3a474b9..773797b 100644
--- a/src/geometry/Atom.h
+++ b/src/geometry/Atom.h
@@ -36,7 +36,7 @@
 
 /* External forward declaration */
 namespace libecpint {
-class ECP;
+struct ECP;
 }
 namespace Serenity {
 /* Forward declarations */
diff --git a/src/geometry/GEPOLSurfaceConstructor.h b/src/geometry/GEPOLSurfaceConstructor.h
index 5d7b74e..d2aba91 100644
--- a/src/geometry/GEPOLSurfaceConstructor.h
+++ b/src/geometry/GEPOLSurfaceConstructor.h
@@ -31,7 +31,7 @@ class Triangle;
 class Atom;
 class Point;
 class GridController;
-class PCMSettings;
+struct PCMSettings;
 namespace Options {
 enum class PCM_ATOMIC_RADII_TYPES;
 enum class PCM_CAVITY_TYPES;
diff --git a/src/geometry/Geometry.cpp b/src/geometry/Geometry.cpp
index 17a8a33..531175e 100644
--- a/src/geometry/Geometry.cpp
+++ b/src/geometry/Geometry.cpp
@@ -112,9 +112,10 @@ void Geometry::calcCoreCoreRepulsion() const {
     if (_atoms[i]->isDummy())
       continue;
     for (unsigned int j = 0; j < i; ++j) {
-      if (!_atoms[j]->isDummy())
+      if (!_atoms[j]->isDummy()) {
         _coreCoreRepulsion +=
             _atoms[i]->getEffectiveCharge() * _atoms[j]->getEffectiveCharge() / distance(*_atoms[i], *_atoms[j]);
+      }
     }
   }
   _coreCoreRepulsionUpToDate = true;
@@ -563,6 +564,7 @@ void Geometry::addAsDummy(const Geometry& add, bool toFront) {
   else {
     _atoms.insert(_atoms.end(), dummyAtoms.begin(), dummyAtoms.end());
   }
+  this->notifyObjects();
 }
 
 } /* namespace Serenity */
diff --git a/src/geometry/Geometry.h b/src/geometry/Geometry.h
index 518b70a..1b857a3 100644
--- a/src/geometry/Geometry.h
+++ b/src/geometry/Geometry.h
@@ -28,9 +28,6 @@
 #include <vector>
 
 /* Forward declarations */
-namespace HDF5 {
-class Filepath;
-}
 namespace Serenity {
 template<typename>
 class Matrix;
@@ -41,7 +38,7 @@ class Matrix;
  * @brief Holds a set of atoms.
  *
  */
-class Geometry : public ObjectSensitiveClass<Atom> {
+class Geometry : public ObjectSensitiveClass<Atom>, public NotifyingClass<Geometry> {
   friend class GradientCalculator;
 
  public:
@@ -82,21 +79,23 @@ class Geometry : public ObjectSensitiveClass<Atom> {
    * @returns The energy due to the Coulomb repulsion of the atoms from each other
    */
   inline double getCoreCoreRepulsion() const {
-    if (!_coreCoreRepulsionUpToDate)
+    if (!_coreCoreRepulsionUpToDate) {
       calcCoreCoreRepulsion();
+    }
     return _coreCoreRepulsion;
   }
   /**
    * @returns The center of mass
    */
   inline Point getCenterOfMass() const {
-    if (!_centerOfMassUpToDate)
+    if (!_centerOfMassUpToDate) {
       calcCenterOfMass();
+    }
     return _centerOfMass;
   }
 
   /**
-   * @brief A schortcut to acess atoms directly.
+   * @brief A shortcut to acess atoms directly.
    *
    * @param   i
    * @returns the ith atom of the Geometry.
@@ -274,18 +273,24 @@ class Geometry : public ObjectSensitiveClass<Atom> {
     for (auto atom : rhs.getAtoms()) {
       this->_atoms.push_back(atom);
       atom->addSensitiveObject(this->_self);
-      if (atom->getX() < this->_minX)
+      if (atom->getX() < this->_minX) {
         this->_minX = atom->getX();
-      if (atom->getY() < this->_minY)
+      }
+      if (atom->getY() < this->_minY) {
         this->_minY = atom->getY();
-      if (atom->getZ() < this->_minZ)
+      }
+      if (atom->getZ() < this->_minZ) {
         this->_minZ = atom->getZ();
-      if (atom->getX() > this->_maxX)
+      }
+      if (atom->getX() > this->_maxX) {
         this->_maxX = atom->getX();
-      if (atom->getY() > this->_maxY)
+      }
+      if (atom->getY() > this->_maxY) {
         this->_maxY = atom->getY();
-      if (atom->getZ() > this->_maxZ)
+      }
+      if (atom->getZ() > this->_maxZ) {
         this->_maxZ = atom->getZ();
+      }
     }
     return *this;
   }
diff --git a/src/geometry/MolecularSurfaceFactory.h b/src/geometry/MolecularSurfaceFactory.h
index 51f6e57..83060e9 100644
--- a/src/geometry/MolecularSurfaceFactory.h
+++ b/src/geometry/MolecularSurfaceFactory.h
@@ -27,7 +27,7 @@
 
 namespace Serenity {
 
-class PCMSettings;
+struct PCMSettings;
 class Atom;
 class Geometry;
 
diff --git a/src/geometry/gradients/NumericalHessianCalc.cpp b/src/geometry/gradients/NumericalHessianCalc.cpp
index c3fdb90..47c18ef 100644
--- a/src/geometry/gradients/NumericalHessianCalc.cpp
+++ b/src/geometry/gradients/NumericalHessianCalc.cpp
@@ -26,6 +26,7 @@
 #include "geometry/AtomType.h"
 #include "geometry/Geometry.h"
 #include "geometry/gradients/NumericalGeomGradCalc.h"
+#include "io/HDF5.h"
 #include "math/Matrix.h"
 #include "math/linearAlgebra/Orthogonalization.h"
 #include "parameters/Constants.h"
@@ -216,7 +217,7 @@ Eigen::MatrixXd NumericalHessianCalc<T>::calcHessian(std::shared_ptr<SystemContr
   }
 
   frequencyCalculation(hessian, geometry, {settings});
-  return hessian;
+  return std::move(hessian);
 }
 
 template<Options::SCF_MODES T>
@@ -405,7 +406,7 @@ Eigen::MatrixXd NumericalHessianCalc<T>::calcFaTHessian(std::vector<std::shared_
   }
 
   frequencyCalculation(hessian, systemGeometry, settings);
-  return hessian;
+  return std::move(hessian);
 }
 
 template<Options::SCF_MODES T>
diff --git a/src/grid/AtomCenteredGridController.cpp b/src/grid/AtomCenteredGridController.cpp
index 8b1e919..eee128c 100644
--- a/src/grid/AtomCenteredGridController.cpp
+++ b/src/grid/AtomCenteredGridController.cpp
@@ -37,7 +37,7 @@ AtomCenteredGridController::AtomCenteredGridController(const shared_ptr<const Ge
 }
 
 std::unique_ptr<AtomCenteredGrid> AtomCenteredGridController::getAtomGrid() {
-  return std::move(_gridFactory->produce(_geometry));
+  return _gridFactory->produce(_geometry);
 }
 
 void AtomCenteredGridController::produceGrid() {
diff --git a/src/integrals/transformer/Ao2MoExchangeIntegralTransformer.cpp b/src/integrals/transformer/Ao2MoExchangeIntegralTransformer.cpp
index df3deeb..8c49585 100644
--- a/src/integrals/transformer/Ao2MoExchangeIntegralTransformer.cpp
+++ b/src/integrals/transformer/Ao2MoExchangeIntegralTransformer.cpp
@@ -543,8 +543,7 @@ void Ao2MoExchangeIntegralTransformer::calculate_acbd_integrals(
   const unsigned int nLocalAux = llt_metric.cols();
   const Eigen::MatrixXd& toPNO = pair->toPAODomain;
   const unsigned int nPNOs = toPNO.cols();
-  pair->ac_bd = std::move(std::unique_ptr<Matrix<Eigen::MatrixXd>>(
-      new Matrix<Eigen::MatrixXd>(nPNOs, nPNOs, Eigen::MatrixXd::Zero(nPNOs, nPNOs))));
+  pair->ac_bd = std::make_unique<Matrix<Eigen::MatrixXd>>(nPNOs, nPNOs, Eigen::MatrixXd::Zero(nPNOs, nPNOs));
 
   const std::vector<Eigen::MatrixXd> m_acks = get_abK(auxBasisController, nLocalAux, pairDomainToK, pair->domainProjection,
                                                       pair->domainProjection, k_PAOToFullPAOMaps, toPNO, toPNO, abK);
diff --git a/src/io/HDF5.h b/src/io/HDF5.h
index f53524c..7fc5146 100644
--- a/src/io/HDF5.h
+++ b/src/io/HDF5.h
@@ -2,7 +2,7 @@
  * @file HDF5.h
  *
  * @date Jun 8, 2016
- * @author Jan Unslber
+ * @author Jan Unsleber
  *
  *
  * A header to bundle all the HDF5 support and generate a single Namespace for it.
diff --git a/src/math/ScalarProductMatrix.cpp b/src/math/ScalarProductMatrix.cpp
index 97a1d8a..768c833 100644
--- a/src/math/ScalarProductMatrix.cpp
+++ b/src/math/ScalarProductMatrix.cpp
@@ -29,8 +29,8 @@
 namespace Serenity {
 using namespace std;
 
-ScalarProductMatrix::ScalarProductMatrix(const unsigned int rows, const unsigned int cols)
-  : _rows(rows), _cols(cols), _rawData(0), _nStored(0) {
+ScalarProductMatrix::ScalarProductMatrix(const unsigned int /*rows*/, const unsigned int /*cols*/)
+  : _rawData(0), _nStored(0) {
   _scalarProductMatrix.reset(new Matrix<double>(_nStored, _nStored));
 }
 
@@ -42,8 +42,6 @@ void ScalarProductMatrix::putNewData(Matrix<double> newData) {
   // Copy in new raw data
   _rawData.push_back(newData);
   ++_nStored;
-  assert(_rows == newData.rows());
-  assert(_cols == newData.cols());
   /*
    * Append a row and column of scalar products
    */
diff --git a/src/math/ScalarProductMatrix.h b/src/math/ScalarProductMatrix.h
index c1da619..5a0bbc7 100644
--- a/src/math/ScalarProductMatrix.h
+++ b/src/math/ScalarProductMatrix.h
@@ -61,9 +61,6 @@ class ScalarProductMatrix {
   }
 
  private:
-  const unsigned int _rows;
-  const unsigned int _cols;
-
   std::unique_ptr<Matrix<double>> _scalarProductMatrix;
   /**
    * Scalar products are constructed from the underlying data of pairs of held pointers
diff --git a/src/math/linearAlgebra/CholeskyDecomposer.cpp b/src/math/linearAlgebra/CholeskyDecomposer.cpp
index fb786e1..dd844c2 100644
--- a/src/math/linearAlgebra/CholeskyDecomposer.cpp
+++ b/src/math/linearAlgebra/CholeskyDecomposer.cpp
@@ -32,19 +32,17 @@ namespace Serenity {
 CholeskyDecomposer::CholeskyDecomposer(
     Eigen::VectorXd& diagonal,
     std::function<std::unique_ptr<Eigen::MatrixXd>(std::vector<unsigned int>& qualifiedSet)> matrixColumnCalculator,
-    const double decompositionThreshold, const double screeningDamping, const double spanFactor, const unsigned int nMaxQual,
+    const double decompositionThreshold, const double /*screeningDamping*/, const double spanFactor, const unsigned int nMaxQual,
     const double negativeThreshold, const double negativeFailThreshold, const double pruningThreshold)
   : _diagonal(diagonal),
     _matrixColumnCalculator(matrixColumnCalculator),
     _decompositionThreshold(decompositionThreshold),
-    _screeningDamping(screeningDamping),
     _spanFactor(spanFactor),
     _nMaxQual(nMaxQual),
     _negativeThreshold(negativeThreshold),
     _negativeFailThreshold(negativeFailThreshold),
     _pruningThreshold(pruningThreshold),
     _hasBeenCalculated(false) {
-  assert(_screeningDamping >= 1.0);
 }
 
 std::unique_ptr<Eigen::SparseMatrix<double>> CholeskyDecomposer::getCholeskyVectors() {
diff --git a/src/math/linearAlgebra/CholeskyDecomposer.h b/src/math/linearAlgebra/CholeskyDecomposer.h
index 6a51133..e361773 100644
--- a/src/math/linearAlgebra/CholeskyDecomposer.h
+++ b/src/math/linearAlgebra/CholeskyDecomposer.h
@@ -68,8 +68,6 @@ class CholeskyDecomposer {
   std::function<std::unique_ptr<Eigen::MatrixXd>(std::vector<unsigned int>& qualifiedSet)> _matrixColumnCalculator;
   // The decomposition threshold
   const double _decompositionThreshold;
-  // The screening damping factor.
-  const double _screeningDamping;
   // The span factor
   const double _spanFactor;
   // The maximum number of qualified sets
diff --git a/src/misc/FaTConvergenceAccelerator.cpp b/src/misc/FaTConvergenceAccelerator.cpp
index 09646e5..1c4d0e5 100644
--- a/src/misc/FaTConvergenceAccelerator.cpp
+++ b/src/misc/FaTConvergenceAccelerator.cpp
@@ -61,7 +61,8 @@ void FaTConvergenceAccelerator<SCFMode>::accelerateConvergence() {
   // map the density matrices to a vector
   for (auto& sys : _activeSystems) {
     unsigned int nBasisFunctions = sys->getBasisController()->getNBasisFunctions();
-    DensityMatrix<SCFMode> p = sys->getElectronicStructure<SCFMode>()->getDensityMatrixController()->getDensityMatrix();
+    DensityMatrix<SCFMode> p =
+        sys->template getElectronicStructure<SCFMode>()->getDensityMatrixController()->getDensityMatrix();
     unsigned int vectorSizeFactor = (SCFMode == Options::SCF_MODES::RESTRICTED) ? 1 : 2;
     auto newVectorSegment = std::make_shared<Eigen::VectorXd>(vectorSizeFactor * nBasisFunctions * nBasisFunctions);
     unsigned int lastSegmentIndex = 0;
@@ -99,7 +100,7 @@ void FaTConvergenceAccelerator<SCFMode>::accelerateConvergence() {
             nBasisFunctions);
         lastSegmentIndex += nBasisFunctions * nBasisFunctions;
       };
-      sys->getElectronicStructure<SCFMode>()->getDensityMatrixController()->setDensityMatrix(optDensity);
+      sys->template getElectronicStructure<SCFMode>()->getDensityMatrixController()->setDensityMatrix(optDensity);
 
     } /* for sys */
   }   /* rmsd < _diisStartError */
@@ -119,7 +120,7 @@ void FaTConvergenceAccelerator<SCFMode>::calcFPSminusSPF() {
    */
   for (unsigned int i = 0; i < _activeSystems.size(); ++i) {
     auto f = calcEmbeddedFockMatrix(i);
-    auto p = _activeSystems[i]->getElectronicStructure<SCFMode>()->getDensityMatrix();
+    auto p = _activeSystems[i]->template getElectronicStructure<SCFMode>()->getDensityMatrix();
     auto s = _activeSystems[i]->getOneElectronIntegralController()->getOverlapIntegrals();
     unsigned int nBasisFunctions = _activeSystems[i]->getBasisController()->getNBasisFunctions();
 
@@ -181,10 +182,10 @@ FockMatrix<SCFMode> FaTConvergenceAccelerator<SCFMode>::calcEmbeddedFockMatrix(u
   auto grid = activeSystem->getGridController();
 
   auto fdePot = FDEPotentialBundleFactory<SCFMode>::produce(
-      activeSystem, activeSystem->getElectronicStructure<SCFMode>()->getDensityMatrixController(), envSystems,
+      activeSystem, activeSystem->template getElectronicStructure<SCFMode>()->getDensityMatrixController(), envSystems,
       envDensities, std::make_shared<EmbeddingSettings>(_settings.embedding), grid);
 
-  return fdePot->getFockMatrix(activeSystem->getElectronicStructure<SCFMode>()->getDensityMatrix(),
+  return fdePot->getFockMatrix(activeSystem->template getElectronicStructure<SCFMode>()->getDensityMatrix(),
                                std::make_shared<EnergyComponentController>());
 }
 
diff --git a/src/misc/VectorOnDiskStorageController.cpp b/src/misc/VectorOnDiskStorageController.cpp
index 1bab64f..3f03255 100644
--- a/src/misc/VectorOnDiskStorageController.cpp
+++ b/src/misc/VectorOnDiskStorageController.cpp
@@ -21,7 +21,9 @@
 
 /* Include Class Header*/
 #include "misc/VectorOnDiskStorageController.h"
+/* Include Serenity Internal Headers */
 #include "io/Filesystem.h"
+#include "io/HDF5.h"
 
 namespace Serenity {
 
diff --git a/src/misc/VectorOnDiskStorageController.h b/src/misc/VectorOnDiskStorageController.h
index c33fcb5..ebb8e34 100644
--- a/src/misc/VectorOnDiskStorageController.h
+++ b/src/misc/VectorOnDiskStorageController.h
@@ -22,15 +22,21 @@
 #ifndef MISC_VECTORONDISKSTORAGECONTROLLER_H_
 #define MISC_VECTORONDISKSTORAGECONTROLLER_H_
 
-/* Include Serenity Internal Headers */
-#include "io/HDF5.h"
 /* Include Std and External Headers */
 #include <Eigen/Dense>
+#include <map>
 #include <memory>
 #include <stack>
 #include <vector>
 
+namespace H5 {
+class H5File;
+} // namespace H5
+
 namespace Serenity {
+namespace HDF5 {
+using H5File = H5::H5File;
+} // namespace HDF5
 
 /**
  * @class VectorOnDiskStorageController VectorOnDiskStorageController.h
diff --git a/src/postHF/CC/DLPNO_CCSD.cpp b/src/postHF/CC/DLPNO_CCSD.cpp
index 6250c42..df27e4f 100644
--- a/src/postHF/CC/DLPNO_CCSD.cpp
+++ b/src/postHF/CC/DLPNO_CCSD.cpp
@@ -953,8 +953,7 @@ void DLPNO_CCSD::switchIntegrals() {
     pair->singles_j->f_ab = pair->f_ab;
     // (ac|bd)
     unsigned int nPNOs = nCanVir;
-    pair->ac_bd = std::move(std::unique_ptr<Matrix<Eigen::MatrixXd>>(
-        new Matrix<Eigen::MatrixXd>(nPNOs, nPNOs, Eigen::MatrixXd::Zero(nPNOs, nPNOs))));
+    pair->ac_bd = std::make_unique<Matrix<Eigen::MatrixXd>>(nPNOs, nPNOs, Eigen::MatrixXd::Zero(nPNOs, nPNOs));
     pair->ia_bc = std::vector<Eigen::MatrixXd>(nPNOs, Eigen::MatrixXd::Zero(nPNOs, nPNOs));
     pair->ja_bc = std::vector<Eigen::MatrixXd>(nPNOs, Eigen::MatrixXd::Zero(nPNOs, nPNOs));
     pair->jc_ab = std::vector<Eigen::MatrixXd>(nPNOs, Eigen::MatrixXd::Zero(nPNOs, nPNOs));
diff --git a/src/postHF/LRSCF/Tools/EigenvalueSolver.h b/src/postHF/LRSCF/Tools/EigenvalueSolver.h
index f5a82cf..d5de615 100644
--- a/src/postHF/LRSCF/Tools/EigenvalueSolver.h
+++ b/src/postHF/LRSCF/Tools/EigenvalueSolver.h
@@ -94,7 +94,7 @@ class EigenvalueSolver : public IterativeSolver {
    * @brief Obtains the left eigenvectors if the symmetric TDDFT problem was solved
    *        and/or normlizes the eigenvectors. Prints the converged eigenvalues in au.
    */
-  void postProcessing();
+  void postProcessing() override;
 
   ///@brief Bool to invoke the printing of the subspace matrix.
   bool _printResponseMatrix;
diff --git a/src/postHF/LRSCF/Tools/LRSCFSetup.cpp b/src/postHF/LRSCF/Tools/LRSCFSetup.cpp
index 441285d..e28256e 100644
--- a/src/postHF/LRSCF/Tools/LRSCFSetup.cpp
+++ b/src/postHF/LRSCF/Tools/LRSCFSetup.cpp
@@ -24,6 +24,7 @@
 #include "geometry/Geometry.h"
 #include "geometry/Point.h"
 #include "integrals/wrappers/Libint.h"
+#include "io/HDF5.h"
 #include "settings/LRSCFOptions.h"
 
 namespace Serenity {
diff --git a/src/postHF/LocalCorrelation/CouplingOrbitalSet.cpp b/src/postHF/LocalCorrelation/CouplingOrbitalSet.cpp
index 9fdf2f7..0d226d3 100644
--- a/src/postHF/LocalCorrelation/CouplingOrbitalSet.cpp
+++ b/src/postHF/LocalCorrelation/CouplingOrbitalSet.cpp
@@ -19,6 +19,8 @@
  */
 /* Include Class Header*/
 #include "postHF/LocalCorrelation/CouplingOrbitalSet.h"
+/* Include Serenity Internal Headers */
+#include "io/HDF5.h"
 /* Include Std and External Headers */
 #include <cassert>
 
diff --git a/src/postHF/LocalCorrelation/CouplingOrbitalSet.h b/src/postHF/LocalCorrelation/CouplingOrbitalSet.h
index d717a5f..e69ec7d 100644
--- a/src/postHF/LocalCorrelation/CouplingOrbitalSet.h
+++ b/src/postHF/LocalCorrelation/CouplingOrbitalSet.h
@@ -24,14 +24,20 @@
 /* Include Serenity Internal Headers */
 #include "data/OrbitalPair.h"                                      //Definition of OrbitalPair.
 #include "data/SingleSubstitution.h"                               //Definition of SingleSubstitution.
-#include "io/HDF5.h"                                               //HDF5 types.
 #include "postHF/LocalCorrelation/DomainOverlapMatrixController.h" //Overlap matrices.
 
 /* Include Std and External Headers */
 #include <Eigen/Dense> //Dense matrices
 #include <memory>      //smrt_ptr
 
+namespace H5 {
+class H5File;
+} // namespace H5
+
 namespace Serenity {
+namespace HDF5 {
+using H5File = H5::H5File;
+} // namespace HDF5
 
 /**
  * @class CouplingOrbitalSet CouplingOrbitalSet.h
diff --git a/src/postHF/LocalCorrelation/DomainOverlapMatrixController.cpp b/src/postHF/LocalCorrelation/DomainOverlapMatrixController.cpp
index b8b9bb6..e4bb326 100644
--- a/src/postHF/LocalCorrelation/DomainOverlapMatrixController.cpp
+++ b/src/postHF/LocalCorrelation/DomainOverlapMatrixController.cpp
@@ -42,12 +42,9 @@ DomainOverlapMatrixController::DomainOverlapMatrixController(MatrixInBasis<RESTR
   unsigned int nPairs = _closeOrbitalPairs.size();
   unsigned int nSingles = _singles.size();
   bool calculateSingles = nSingles > 0;
-  _s_ij_kl = std::move(std::unique_ptr<Matrix<std::shared_ptr<Eigen::MatrixXd>>>(
-      new Matrix<std::shared_ptr<Eigen::MatrixXd>>(nPairs, nPairs, nullptr)));
-  _s_ij_k = std::move(std::unique_ptr<Matrix<std::shared_ptr<Eigen::MatrixXd>>>(
-      new Matrix<std::shared_ptr<Eigen::MatrixXd>>(nPairs, nSingles, nullptr)));
-  _s_k_l = std::move(std::unique_ptr<Matrix<std::shared_ptr<Eigen::MatrixXd>>>(
-      new Matrix<std::shared_ptr<Eigen::MatrixXd>>(nSingles, nSingles, nullptr)));
+  _s_ij_kl = std::make_unique<Matrix<std::shared_ptr<Eigen::MatrixXd>>>(nPairs, nPairs, nullptr);
+  _s_ij_k = std::make_unique<Matrix<std::shared_ptr<Eigen::MatrixXd>>>(nPairs, nSingles, nullptr);
+  _s_k_l = std::make_unique<Matrix<std::shared_ptr<Eigen::MatrixXd>>>(nSingles, nSingles, nullptr);
   _singlesIndices = Eigen::VectorXi::Constant(nOcc, -1);
   for (unsigned int iSingle = 0; iSingle < _singles.size(); ++iSingle) {
     const auto& single = _singles[iSingle];
diff --git a/src/potentials/ABFockMatrixConstruction/ABNAddFuncPotential.cpp b/src/potentials/ABFockMatrixConstruction/ABNAddFuncPotential.cpp
index a54d5da..079130b 100644
--- a/src/potentials/ABFockMatrixConstruction/ABNAddFuncPotential.cpp
+++ b/src/potentials/ABFockMatrixConstruction/ABNAddFuncPotential.cpp
@@ -110,11 +110,11 @@ SPMatrix<SCFMode>& ABNAddFuncPotential<SCFMode>::getMatrix() {
       auto superDensityOnGrid = std::unique_ptr<DensityOnGrid<SCFMode>>(new DensityOnGrid<SCFMode>(_grid));
 
       auto basisFunctionsOnGridAct = BasisFunctionOnGridControllerFactory::produce(
-          actSettings, activeSystem->getElectronicStructure<SCFMode>()->getDensityMatrix().getBasisController(), _grid);
+          actSettings, activeSystem->template getElectronicStructure<SCFMode>()->getDensityMatrix().getBasisController(), _grid);
       DensityOnGridCalculator<SCFMode> densOnGridCalc(basisFunctionsOnGridAct, actSettings.grid.blockAveThreshold);
       // Calculating and adding density.
       *actDensityOnGrid =
-          densOnGridCalc.calcDensityOnGrid(activeSystem->getElectronicStructure<SCFMode>()->getDensityMatrix());
+          densOnGridCalc.calcDensityOnGrid(activeSystem->template getElectronicStructure<SCFMode>()->getDensityMatrix());
       *superDensityOnGrid = _envDensityOnGrid->getDensityOnGrid();
       *superDensityOnGrid += *actDensityOnGrid;
       // Building controllers.
@@ -129,11 +129,11 @@ SPMatrix<SCFMode>& ABNAddFuncPotential<SCFMode>::getMatrix() {
       auto superDensityGradOnGrid = makeGradientPtr<DensityOnGrid<SCFMode>>(_grid);
 
       auto basisFunctionsOnGridC = BasisFunctionOnGridControllerFactory::produce(
-          actSettings, activeSystem->getElectronicStructure<SCFMode>()->getDensityMatrix().getBasisController(), _grid);
+          actSettings, activeSystem->template getElectronicStructure<SCFMode>()->getDensityMatrix().getBasisController(), _grid);
       DensityOnGridCalculator<SCFMode> densOnGridCalc(basisFunctionsOnGridC, actSettings.grid.blockAveThreshold);
       // Calculating and adding density.
       *actDensityOnGrid = densOnGridCalc.calcDensityAndGradientOnGrid(
-          activeSystem->getElectronicStructure<SCFMode>()->getDensityMatrix(), *actDensityGradOnGrid);
+          activeSystem->template getElectronicStructure<SCFMode>()->getDensityMatrix(), *actDensityGradOnGrid);
       *superDensityOnGrid = _envDensityOnGrid->getDensityOnGrid();
       *superDensityOnGrid += *actDensityOnGrid;
       *superDensityGradOnGrid = _envDensityOnGrid->getDensityGradientOnGrid();
diff --git a/src/potentials/CoulombInteractionPotential.cpp b/src/potentials/CoulombInteractionPotential.cpp
index 4362920..6642e33 100644
--- a/src/potentials/CoulombInteractionPotential.cpp
+++ b/src/potentials/CoulombInteractionPotential.cpp
@@ -33,6 +33,7 @@
 #include "integrals/looper/CoulombInteractionIntLooper.h" //Loop integrals.
 #include "integrals/looper/TwoElecThreeCenterIntLooper.h" //Loop integrals.
 #include "io/FormattedOutputStream.h"                     //Filtered output streams.
+#include "io/HDF5.h"                                      //HDF5 IO
 #include "misc/Timing.h"                                  //Timings.
 #include "potentials/CoulombPotential.h"                  //Gradient construction. Substract intra-subsystem part.
 #include "settings/Settings.h"                            //Settings.
@@ -358,7 +359,7 @@ Eigen::MatrixXd CoulombInteractionPotential<SCFMode>::getGeomGradients() {
   unsigned int nAtomsAct = atomsAct.size();
   Matrix<double> activeSystemGradientContr(atomsAct.size(), 3);
   activeSystemGradientContr.setZero();
-  DensityMatrix<RESTRICTED> densityMatrix(actSystem->getElectronicStructure<SCFMode>()->getDensityMatrix().total());
+  DensityMatrix<RESTRICTED> densityMatrix(actSystem->template getElectronicStructure<SCFMode>()->getDensityMatrix().total());
 
   for (unsigned int i = 0; i < _envSystems.size(); ++i) {
     // Creating supersystem Geometry and Basis, necessary still for inverseM
@@ -374,7 +375,6 @@ Eigen::MatrixXd CoulombInteractionPotential<SCFMode>::getGeomGradients() {
     unsigned int nAtoms = ActiveFrozenAtoms.size();
     Matrix<double> eriContr(nAtoms, 3);
     eriContr.setZero();
-    double test = 0.0;
 
     auto superSystemGeometry = std::make_shared<Geometry>(ActiveFrozenAtoms);
     auto superSystemBasisController = AtomCenteredBasisControllerFactory::produce(
@@ -635,9 +635,9 @@ Eigen::MatrixXd CoulombInteractionPotential<SCFMode>::getGeomGradients() {
 
     TwoElecThreeCenterIntLooper derivLooper2(libint2::Operator::coulomb, 1, basisControllerEnv, auxBasisController, 1E-10);
     auto const add3cDerivs2 = [&eriContrPriv, &Dvec, &densityMatrixEnv, &mappingEnv, &auxMapping, &basisControllerEnv,
-                               &auxBasisController, &nAtomsAct,
-                               &test](const unsigned int& i, const unsigned int& j, const unsigned int& K,
-                                      Eigen::VectorXd& intValues, const unsigned int threadId) {
+                               &auxBasisController, &nAtomsAct](const unsigned int& i, const unsigned int& j,
+                                                                const unsigned int& K, Eigen::VectorXd& intValues,
+                                                                const unsigned int threadId) {
       double perm = (i == j ? 1.0 : 2.0);
       for (unsigned int iDirection = 0; iDirection < 3; ++iDirection) {
         for (unsigned int iAtom = 0; iAtom < 3; ++iAtom) {
@@ -662,9 +662,9 @@ Eigen::MatrixXd CoulombInteractionPotential<SCFMode>::getGeomGradients() {
 
     TwoElecThreeCenterIntLooper derivLooper1(libint2::Operator::coulomb, 1, basisController, auxBasisControllerEnv, 1E-10);
     auto const add3cDerivs1 = [&eriContrPriv, &Dvec, &densityMatrix, &mapping, &auxMappingEnv, &basisController,
-                               &auxBasisControllerEnv, &nAtomsAct, &nAuxBasFunc,
-                               &test](const unsigned int& i, const unsigned int& j, const unsigned int& K,
-                                      Eigen::VectorXd& intValues, const unsigned int threadId) {
+                               &auxBasisControllerEnv, &nAtomsAct,
+                               &nAuxBasFunc](const unsigned int& i, const unsigned int& j, const unsigned int& K,
+                                             Eigen::VectorXd& intValues, const unsigned int threadId) {
       double perm = (i == j ? 1.0 : 2.0);
       for (unsigned int iDirection = 0; iDirection < 3; ++iDirection) {
         for (unsigned int iAtom = 0; iAtom < 3; ++iAtom) {
@@ -689,9 +689,8 @@ Eigen::MatrixXd CoulombInteractionPotential<SCFMode>::getGeomGradients() {
 
     TwoElecThreeCenterIntLooper derivLooper3(libint2::Operator::coulomb, 1, basisController, auxBasisController, 1E-10);
     auto const add3cDerivs3 = [&eriContrPriv, &Dvec, &densityMatrix, &mapping, &auxMapping, &basisController,
-                               &auxBasisController, &nAtomsAct, &nAuxBasFunc,
-                               &test](const unsigned int& i, const unsigned int& j, const unsigned int& K,
-                                      Eigen::VectorXd& intValues, const unsigned int threadId) {
+                               &auxBasisController](const unsigned int& i, const unsigned int& j, const unsigned int& K,
+                                                    Eigen::VectorXd& intValues, const unsigned int threadId) {
       double perm = (i == j ? 1.0 : 2.0);
       for (unsigned int iDirection = 0; iDirection < 3; ++iDirection) {
         for (unsigned int iAtom = 0; iAtom < 3; ++iAtom) {
@@ -732,7 +731,7 @@ Eigen::MatrixXd CoulombInteractionPotential<SCFMode>::getGeomGradients() {
   // hence this has to be explicitly calculated and subtracted in the end. This is not incredibly expensive,
   // but unnecessary and, alas, very hard to extract from the above algorithm.
   CoulombPotential<SCFMode> coulPot(
-      actSystem, actSystem->getElectronicStructure<SCFMode>()->getDensityMatrixController(),
+      actSystem, actSystem->template getElectronicStructure<SCFMode>()->getDensityMatrixController(),
       RI_J_IntegralControllerFactory::getInstance().produce(
           actSystem->getAtomCenteredBasisController(),
           actSystem->getAtomCenteredBasisController(Options::BASIS_PURPOSES::AUX_COULOMB)),
diff --git a/src/potentials/CoulombPotential.cpp b/src/potentials/CoulombPotential.cpp
index 4b0a7a8..6497c28 100644
--- a/src/potentials/CoulombPotential.cpp
+++ b/src/potentials/CoulombPotential.cpp
@@ -171,7 +171,7 @@ std::vector<unsigned int> CoulombPotential<SCFMode>::createBasisToAtomIndexMappi
 template<Options::SCF_MODES SCFMode>
 Eigen::MatrixXd CoulombPotential<SCFMode>::getGeomGradients() {
   auto actSystem = _actSystem.lock();
-  const auto& orbitalSet = actSystem->getActiveOrbitalController<SCFMode>();
+  const auto& orbitalSet = actSystem->template getActiveOrbitalController<SCFMode>();
   auto atoms = actSystem->getAtoms();
   unsigned int nAtoms = atoms.size();
   Matrix<double> eriContr(nAtoms, 3);
@@ -194,7 +194,7 @@ Eigen::MatrixXd CoulombPotential<SCFMode>::getGeomGradients() {
   auto auxBasisIndicesRed = auxBasisController->getBasisIndicesRed();
   auto auxMapping = createBasisToAtomIndexMapping(auxBasisIndicesRed, nAuxBasFuncRed);
 
-  DensityMatrix<RESTRICTED> densityMatrix(actSystem->getElectronicStructure<SCFMode>()->getDensityMatrix().total());
+  DensityMatrix<RESTRICTED> densityMatrix(actSystem->template getElectronicStructure<SCFMode>()->getDensityMatrix().total());
 
   // Get the existing RI_J Controller from Config (there should be one from the first SCF)
 
@@ -342,7 +342,7 @@ Eigen::MatrixXd CoulombPotential<SCFMode>::getGeomGradients() {
 #else
   eriContr = eriContrPriv[0];
 #endif
-  return eriContr;
+  return std::move(eriContr);
 }
 
 template class CoulombPotential<Options::SCF_MODES::RESTRICTED>;
diff --git a/src/potentials/ExchangePotential.cpp b/src/potentials/ExchangePotential.cpp
index b1e2e05..cef7903 100644
--- a/src/potentials/ExchangePotential.cpp
+++ b/src/potentials/ExchangePotential.cpp
@@ -360,7 +360,7 @@ Eigen::MatrixXd ExchangePotential<RESTRICTED>::getGeomGradients() {
 #else
   xGrad -= priv[0] * _exc;
 #endif
-  return xGrad;
+  return std::move(xGrad);
 }
 
 template<>
@@ -425,7 +425,7 @@ Eigen::MatrixXd ExchangePotential<UNRESTRICTED>::getGeomGradients() {
 #else
   xGrad -= priv[0] * _exc;
 #endif
-  return xGrad;
+  return std::move(xGrad);
 }
 
 template class ExchangePotential<Options::SCF_MODES::RESTRICTED>;
diff --git a/src/potentials/FuncPotential.cpp b/src/potentials/FuncPotential.cpp
index fa31071..63b1a88 100644
--- a/src/potentials/FuncPotential.cpp
+++ b/src/potentials/FuncPotential.cpp
@@ -131,7 +131,7 @@ Eigen::MatrixXd FuncPotential<SCFMode>::getGeomGradients() {
   }
 
   // Create mapping
-  auto orbitalSet = system->getActiveOrbitalController<SCFMode>();
+  auto orbitalSet = system->template getActiveOrbitalController<SCFMode>();
   std::vector<unsigned int> mapping(nBasisFunctions);
   std::vector<bool> hasElementBeenSet(nBasisFunctions, false);
   const auto& basisIndices = basisController->getBasisIndices();
@@ -159,7 +159,7 @@ Eigen::MatrixXd FuncPotential<SCFMode>::getGeomGradients() {
   const auto& weights = _basisFunctionOnGridController->getGridController()->getWeights();
 
   // Get density Matrix
-  auto densityMatrix(system->getElectronicStructure<SCFMode>()->getDensityMatrix());
+  auto densityMatrix(system->template getElectronicStructure<SCFMode>()->getDensityMatrix());
   Eigen::MatrixXd gradientContr = Eigen::MatrixXd::Zero(nAtoms, 3);
 #pragma omp parallel
   {
diff --git a/src/potentials/HCorePotential.cpp b/src/potentials/HCorePotential.cpp
index 67c1507..f87aa8e 100644
--- a/src/potentials/HCorePotential.cpp
+++ b/src/potentials/HCorePotential.cpp
@@ -73,14 +73,14 @@ double HCorePotential<SCFMode>::getEnergy(const DensityMatrix<SCFMode>& P) {
 template<Options::SCF_MODES SCFMode>
 Eigen::MatrixXd HCorePotential<SCFMode>::getGeomGradients() {
   auto system = _system.lock();
-  const auto& orbitalSet = system->getActiveOrbitalController<SCFMode>();
+  const auto& orbitalSet = system->template getActiveOrbitalController<SCFMode>();
   auto atoms = system->getAtoms();
   unsigned int nAtoms = atoms.size();
   unsigned int maxAtoms = 2;
   Eigen::MatrixXd gradientContr(nAtoms, 3);
   gradientContr.setZero();
 
-  DensityMatrix<SCFMode> matrix(system->getElectronicStructure<SCFMode>()->getDensityMatrix());
+  DensityMatrix<SCFMode> matrix(system->template getElectronicStructure<SCFMode>()->getDensityMatrix());
   matrix = calcEnergyWeightedDensityMatrix(system, orbitalSet);
   for_spin(matrix) {
     matrix_spin *= -1.0;
@@ -137,7 +137,7 @@ Eigen::MatrixXd HCorePotential<SCFMode>::getGeomGradients() {
     { gradientContr += gradientContrPriv; }
   } /* END OpenMP parallel */
 
-  DensityMatrix<RESTRICTED> densMatrix(system->getElectronicStructure<SCFMode>()->getDensityMatrix().total());
+  DensityMatrix<RESTRICTED> densMatrix(system->template getElectronicStructure<SCFMode>()->getDensityMatrix().total());
 
   libint.initialize(libint2::Operator::nuclear, 1, 2, atoms);
 #pragma omp parallel
diff --git a/src/potentials/HFPotential.cpp b/src/potentials/HFPotential.cpp
index cab9ee7..8e74807 100644
--- a/src/potentials/HFPotential.cpp
+++ b/src/potentials/HFPotential.cpp
@@ -463,7 +463,7 @@ Eigen::MatrixXd HFPotential<RESTRICTED>::getGeomGradients() {
   hfGrad += cPriv[0];
   hfGrad -= xPriv[0] * _xRatio;
 #endif
-  return hfGrad;
+  return std::move(hfGrad);
 }
 
 template<>
@@ -551,7 +551,7 @@ Eigen::MatrixXd HFPotential<UNRESTRICTED>::getGeomGradients() {
   hfGrad += cPriv[0];
   hfGrad -= xPriv[0] * _xRatio;
 #endif
-  return hfGrad;
+  return std::move(hfGrad);
 }
 
 template<Options::SCF_MODES SCFMode>
diff --git a/src/potentials/HoffmannProjectionPotential.cpp b/src/potentials/HoffmannProjectionPotential.cpp
index 87dbbfb..0d31f17 100644
--- a/src/potentials/HoffmannProjectionPotential.cpp
+++ b/src/potentials/HoffmannProjectionPotential.cpp
@@ -60,7 +60,7 @@ HoffmannProjectionPotential<SCFMode>::HoffmannProjectionPotential(
         LocalizationTask locTask(pickedSystem);
         locTask.run();
       }
-      const auto& envCoeff = pickedSystem->getActiveOrbitalController<SCFMode>()->getCoefficients();
+      const auto& envCoeff = pickedSystem->template getActiveOrbitalController<SCFMode>()->getCoefficients();
       auto orbitalPopulations = MullikenPopulationCalculator<SCFMode>::calculateAtomwiseOrbitalPopulations(
           envCoeff, pickedSystem->getOneElectronIntegralController()->getOverlapIntegrals(),
           pickedSystem->getAtomCenteredBasisController()->getBasisIndices());
diff --git a/src/potentials/HuzinagaFDEProjectionPotential.cpp b/src/potentials/HuzinagaFDEProjectionPotential.cpp
index 6a50c00..3f0f792 100644
--- a/src/potentials/HuzinagaFDEProjectionPotential.cpp
+++ b/src/potentials/HuzinagaFDEProjectionPotential.cpp
@@ -204,7 +204,7 @@ SPMatrix<SCFMode> HuzinagaFDEProjectionPotential<SCFMode>::buildOuterDiagonalFoc
   SPMatrix<SCFMode> f_AB(Eigen::MatrixXd::Zero(nBasisAct, nBasisEnv));
   if (_activeFockMatrix) {
     SPMatrix<SCFMode> f_AA =
-        _activeFockMatrix->getFockMatrix(activeSystem->getElectronicStructure<SCFMode>()->getDensityMatrix(),
+        _activeFockMatrix->getFockMatrix(activeSystem->template getElectronicStructure<SCFMode>()->getDensityMatrix(),
                                          std::make_shared<EnergyComponentController>());
     if (_naddKinPot)
       f_AA += _naddKinPot->getMatrix();
@@ -227,13 +227,13 @@ SPMatrix<SCFMode> HuzinagaFDEProjectionPotential<SCFMode>::buildOuterDiagonalFoc
 template<Options::SCF_MODES SCFMode>
 void HuzinagaFDEProjectionPotential<SCFMode>::writeInterSubsystemOccOverlap() {
   auto activeSystem = _activeSystem.lock();
-  auto nOccAct = activeSystem->getNOccupiedOrbitals<SCFMode>();
-  const auto& coeffAct = activeSystem->getActiveOrbitalController<SCFMode>()->getCoefficients();
+  auto nOccAct = activeSystem->template getNOccupiedOrbitals<SCFMode>();
+  const auto& coeffAct = activeSystem->template getActiveOrbitalController<SCFMode>()->getCoefficients();
   for (unsigned int iEnv = 0; iEnv < _environmentSystems.size(); ++iEnv) {
     if (_s_ABs[iEnv]) {
       auto environmentSystem = _environmentSystems[iEnv].lock();
-      const auto& coeffEnv = environmentSystem->getActiveOrbitalController<SCFMode>()->getCoefficients();
-      auto nOccEnv = environmentSystem->getNOccupiedOrbitals<SCFMode>();
+      const auto& coeffEnv = environmentSystem->template getActiveOrbitalController<SCFMode>()->getCoefficients();
+      auto nOccEnv = environmentSystem->template getNOccupiedOrbitals<SCFMode>();
       assert(_s_ABs[iEnv]);
       const auto& s_AB = *_s_ABs[iEnv];
       // Calculate the average overlap between the occupied orbitals of the subsystems.
diff --git a/src/potentials/HuzinagaFDEProjectionPotential.h b/src/potentials/HuzinagaFDEProjectionPotential.h
index 2ec4000..7458082 100644
--- a/src/potentials/HuzinagaFDEProjectionPotential.h
+++ b/src/potentials/HuzinagaFDEProjectionPotential.h
@@ -37,7 +37,7 @@ namespace Serenity {
 
 /* Forward declarations */
 class SystemController;
-class EmbeddingSettings;
+struct EmbeddingSettings;
 
 /**
  * @class HuzinagaFDEProjectionPotential HuzinagaFDEProjectionPotential.h
diff --git a/src/potentials/LRXPotential.cpp b/src/potentials/LRXPotential.cpp
index bdd4e8e..19250d9 100644
--- a/src/potentials/LRXPotential.cpp
+++ b/src/potentials/LRXPotential.cpp
@@ -367,7 +367,7 @@ Eigen::MatrixXd LRXPotential<RESTRICTED>::getGeomGradients() {
 #else
   lrxGrad -= priv[0] * _exc;
 #endif
-  return lrxGrad;
+  return std::move(lrxGrad);
 }
 
 template<>
@@ -432,7 +432,7 @@ Eigen::MatrixXd LRXPotential<UNRESTRICTED>::getGeomGradients() {
 #else
   lrxGrad -= priv[0] * _exc;
 #endif
-  return lrxGrad;
+  return std::move(lrxGrad);
 }
 
 template class LRXPotential<Options::SCF_MODES::RESTRICTED>;
diff --git a/src/potentials/NAddFuncPotential.cpp b/src/potentials/NAddFuncPotential.cpp
index 9fd348d..9b2ca87 100644
--- a/src/potentials/NAddFuncPotential.cpp
+++ b/src/potentials/NAddFuncPotential.cpp
@@ -266,7 +266,7 @@ Eigen::MatrixXd NAddFuncPotential<SCFMode>::getGeomGradients() {
   const unsigned int nBasisFunctions = basisController->getNBasisFunctions();
 
   // Create mapping
-  auto orbitalSet = system->getActiveOrbitalController<SCFMode>();
+  auto orbitalSet = system->template getActiveOrbitalController<SCFMode>();
   std::vector<unsigned int> mapping(nBasisFunctions);
   std::vector<bool> hasElementBeenSet(nBasisFunctions, false);
   const auto& basisIndices = basisController->getBasisIndices();
@@ -295,7 +295,7 @@ Eigen::MatrixXd NAddFuncPotential<SCFMode>::getGeomGradients() {
   const auto& weights = _basisFunctionOnGridController->getGridController()->getWeights();
 
   // Get density Matrix
-  auto densityMatrix(system->getElectronicStructure<SCFMode>()->getDensityMatrix());
+  auto densityMatrix(system->template getElectronicStructure<SCFMode>()->getDensityMatrix());
 
   Eigen::MatrixXd gradientContr = Eigen::MatrixXd::Zero(nAtoms, 3);
 #pragma omp parallel
diff --git a/src/potentials/NEInteractionPotential.cpp b/src/potentials/NEInteractionPotential.cpp
index 085a3a8..2fd9d70 100644
--- a/src/potentials/NEInteractionPotential.cpp
+++ b/src/potentials/NEInteractionPotential.cpp
@@ -273,7 +273,7 @@ Eigen::MatrixXd NEInteractionPotential<SCFMode>::getGeomGradients() {
       }
     }
   }
-  return activeSystemGradientContr;
+  return std::move(activeSystemGradientContr);
 }
 
 template class NEInteractionPotential<Options::SCF_MODES::RESTRICTED>;
diff --git a/src/potentials/PCMPotential.h b/src/potentials/PCMPotential.h
index 66b85eb..408ad8b 100644
--- a/src/potentials/PCMPotential.h
+++ b/src/potentials/PCMPotential.h
@@ -34,7 +34,7 @@ namespace Serenity {
 /* Forward Declarations */
 class BasisController;
 class Geometry;
-class PCMSettings;
+struct PCMSettings;
 template<Options::SCF_MODES T>
 class ContinuumModel;
 template<Options::SCF_MODES T>
diff --git a/src/potentials/TDReconstructionPotential.cpp b/src/potentials/TDReconstructionPotential.cpp
index 0df1bf3..1a22f12 100644
--- a/src/potentials/TDReconstructionPotential.cpp
+++ b/src/potentials/TDReconstructionPotential.cpp
@@ -316,11 +316,11 @@ void TDReconstructionPotential<SCFMode>::calculatePotential() {
 
     std::shared_ptr<PotentialBundle<SCFMode>> potentials;
     if (superSystem->getSettings().method == Options::ELECTRONIC_STRUCTURE_THEORIES::HF) {
-      potentials = activeSystem->getPotentials<SCFMode, Options::ELECTRONIC_STRUCTURE_THEORIES::HF>();
+      potentials = activeSystem->template getPotentials<SCFMode, Options::ELECTRONIC_STRUCTURE_THEORIES::HF>();
     }
     else if (superSystem->getSettings().method == Options::ELECTRONIC_STRUCTURE_THEORIES::DFT) {
-      potentials =
-          activeSystem->getPotentials<SCFMode, Options::ELECTRONIC_STRUCTURE_THEORIES::DFT>(Options::GRID_PURPOSES::DEFAULT);
+      potentials = activeSystem->template getPotentials<SCFMode, Options::ELECTRONIC_STRUCTURE_THEORIES::DFT>(
+          Options::GRID_PURPOSES::DEFAULT);
     }
     else {
       std::cout << "ERROR: None existing electronicStructureTheory requested." << std::endl;
@@ -334,33 +334,36 @@ void TDReconstructionPotential<SCFMode>::calculatePotential() {
     std::shared_ptr<PotentialBundle<SCFMode>> esiPot;
     if (superSystem->getSettings().dft.densityFitting != Options::DENS_FITS::RI) {
       esiPot = std::shared_ptr<PotentialBundle<SCFMode>>(new ESIPotentials<SCFMode>(
-          activeSystem, {envSystems}, activeSystem->getElectronicStructure<SCFMode>()->getDensityMatrixController(),
-          activeSystem->getGeometry(), {envSystemZero->getElectronicStructure<SCFMode>()->getDensityMatrixController()},
+          activeSystem, {envSystems}, activeSystem->template getElectronicStructure<SCFMode>()->getDensityMatrixController(),
+          activeSystem->getGeometry(),
+          {envSystemZero->template getElectronicStructure<SCFMode>()->getDensityMatrixController()},
           {envSystemZero->getGeometry()}));
     }
     else {
       std::vector<std::shared_ptr<BasisController>> envAuxBasis;
 
       esiPot = std::shared_ptr<PotentialBundle<SCFMode>>(new ESIPotentials<SCFMode>(
-          activeSystem, {envSystems}, activeSystem->getElectronicStructure<SCFMode>()->getDensityMatrixController(),
-          activeSystem->getGeometry(), {envSystemZero->getElectronicStructure<SCFMode>()->getDensityMatrixController()},
+          activeSystem, {envSystems}, activeSystem->template getElectronicStructure<SCFMode>()->getDensityMatrixController(),
+          activeSystem->getGeometry(),
+          {envSystemZero->template getElectronicStructure<SCFMode>()->getDensityMatrixController()},
           {envSystemZero->getGeometry()}, activeSystem->getBasisController(Options::BASIS_PURPOSES::AUX_COULOMB),
           {envSystemZero->getBasisController(Options::BASIS_PURPOSES::AUX_COULOMB)}));
     }
     // ECP TODO: Check consistency!
     std::shared_ptr<Potential<SCFMode>> ecpInt(new ECPInteractionPotential<SCFMode>(
         activeSystem, activeSystem->getGeometry()->getAtoms(), envSystemZero->getGeometry()->getAtoms(),
-        {envSystemZero->getElectronicStructure<SCFMode>()->getDensityMatrixController()}, activeSystem->getBasisController()));
+        {envSystemZero->template getElectronicStructure<SCFMode>()->getDensityMatrixController()},
+        activeSystem->getBasisController()));
 
     bool usesPCM = activeSystem->getSettings().pcm.use;
     std::vector<std::shared_ptr<ElectrostaticPotentialOnGridController<SCFMode>>> envElecPots = {};
     if (usesPCM)
-      envElecPots = {
-          envSystemZero->getElectrostaticPotentialOnMolecularSurfaceController<SCFMode>(MOLECULAR_SURFACE_TYPES::FDE)};
+      envElecPots = {envSystemZero->template getElectrostaticPotentialOnMolecularSurfaceController<SCFMode>(
+          MOLECULAR_SURFACE_TYPES::FDE)};
     std::shared_ptr<Potential<SCFMode>> pcm(new PCMPotential<SCFMode>(
         activeSystem->getSettings().pcm, activeSystem->getBasisController(), activeSystem->getGeometry(),
         (usesPCM) ? activeSystem->getMolecularSurface(MOLECULAR_SURFACE_TYPES::FDE) : nullptr,
-        (usesPCM) ? activeSystem->getElectrostaticPotentialOnMolecularSurfaceController<SCFMode>(MOLECULAR_SURFACE_TYPES::FDE)
+        (usesPCM) ? activeSystem->template getElectrostaticPotentialOnMolecularSurfaceController<SCFMode>(MOLECULAR_SURFACE_TYPES::FDE)
                   : nullptr,
         envElecPots));
     auto naddXCPot = std::shared_ptr<NAddFuncPotential<SCFMode>>(new NAddFuncPotential<SCFMode>(
@@ -441,14 +444,14 @@ double TDReconstructionPotential<SCFMode>::getEnergy(const DensityMatrix<SCFMode
 
   if (_supXEnergy != 0.0) {
     double xEnergy = _supXEnergy;
-    xEnergy -= activeSystem->getElectronicStructure<SCFMode>()->getEnergyComponentController()->getEnergyComponent(
+    xEnergy -= activeSystem->template getElectronicStructure<SCFMode>()->getEnergyComponentController()->getEnergyComponent(
         ENERGY_CONTRIBUTIONS::KS_DFT_EXACT_EXCHANGE);
     for (auto weak : this->_envSystems) {
       auto sys = weak.lock();
       xEnergy -= sys->template getElectronicStructure<SCFMode>()->getEnergyComponentController()->getEnergyComponent(
           ENERGY_CONTRIBUTIONS::KS_DFT_EXACT_EXCHANGE);
     }
-    activeSystem->getElectronicStructure<SCFMode>()->getEnergyComponentController()->addOrReplaceComponent(
+    activeSystem->template getElectronicStructure<SCFMode>()->getEnergyComponentController()->addOrReplaceComponent(
         ENERGY_CONTRIBUTIONS::FDE_NAD_EXACT_EXCHANGE, xEnergy);
   }
 
diff --git a/src/scf/damper/DynamicDamping.h b/src/scf/damper/DynamicDamping.h
index 40b928a..02858db 100644
--- a/src/scf/damper/DynamicDamping.h
+++ b/src/scf/damper/DynamicDamping.h
@@ -49,7 +49,7 @@ class DynamicDamping : public Damper<SCFMode> {
    * @param newFock     A reference of the Fock matrix to be damped. Is updated and stored as _oldFock.
    * @param newDensity  A copy of the density matrix to be damped. Is also updated, so it can be stored as _oldDensity.
    */
-  void dynamicDamp(FockMatrix<SCFMode>& newFock, DensityMatrix<SCFMode> newDensity);
+  void dynamicDamp(FockMatrix<SCFMode>& newFock, DensityMatrix<SCFMode> newDensity) override;
 
   ///@brief Not used here, just override.
   virtual void damp(FockMatrix<SCFMode>&) override final{};
diff --git a/src/scf/initialGuess/AtomicDensityGuessCalculator.cpp b/src/scf/initialGuess/AtomicDensityGuessCalculator.cpp
index a01932a..97ff6e2 100644
--- a/src/scf/initialGuess/AtomicDensityGuessCalculator.cpp
+++ b/src/scf/initialGuess/AtomicDensityGuessCalculator.cpp
@@ -30,6 +30,7 @@
 #include "geometry/Geometry.h"
 #include "integrals/OneElectronIntegralController.h"
 #include "integrals/wrappers/Libint.h"
+#include "io/HDF5.h"
 #include "math/linearAlgebra/Orthogonalization.h"
 #include "misc/Timing.h"
 #include "misc/WarningTracker.h"
diff --git a/src/scf/initialGuess/AtomicDensityGuessCalculator.h b/src/scf/initialGuess/AtomicDensityGuessCalculator.h
index e796d3f..60e3413 100644
--- a/src/scf/initialGuess/AtomicDensityGuessCalculator.h
+++ b/src/scf/initialGuess/AtomicDensityGuessCalculator.h
@@ -29,7 +29,7 @@
 namespace Serenity {
 /* Forward declarations */
 class Atom;
-class Settings;
+struct Settings;
 
 enum class GUESSMODES { OCCUPATIONS = 0, SCF = 1, SCF_INPLACE = 2 };
 
@@ -70,7 +70,7 @@ class AtomicDensityGuessCalculator : public DensityInitialGuessCalculator {
    */
   std::unique_ptr<DensityMatrix<Options::SCF_MODES::RESTRICTED>>
   calculateInitialDensity(std::shared_ptr<SystemController> systemController) override final {
-    return std::move(calculateInitialDensity(systemController, false));
+    return calculateInitialDensity(systemController, false);
   };
 
  private:
diff --git a/src/serenity.cpp b/src/serenity.cpp
index 644a3d7..f93f7e1 100644
--- a/src/serenity.cpp
+++ b/src/serenity.cpp
@@ -1,6 +1,6 @@
 /**
  * @file serenity.cpp
- * @version 1.3.0
+ * @version 1.3.1
  * @copyright \n
  *  This file is part of the program Serenity.\n\n
  *  Serenity is free software: you can redistribute it and/or modify
diff --git a/src/solvation/Solvents.h b/src/solvation/Solvents.h
index 64acb7b..fbdd52a 100644
--- a/src/solvation/Solvents.h
+++ b/src/solvation/Solvents.h
@@ -23,7 +23,7 @@
 
 namespace Serenity {
 
-class PCMSettings;
+struct PCMSettings;
 namespace Options {
 enum class PCM_SOLVENTS;
 }
diff --git a/src/tasks/ActiveSpaceSelectionTask.cpp b/src/tasks/ActiveSpaceSelectionTask.cpp
index 109d8a9..06478dd 100644
--- a/src/tasks/ActiveSpaceSelectionTask.cpp
+++ b/src/tasks/ActiveSpaceSelectionTask.cpp
@@ -49,7 +49,7 @@ ActiveSpaceSelectionTask<SCFMode>::ActiveSpaceSelectionTask(std::vector<std::sha
   // Check atom ordering
   auto firstGeom = _supersystems[0]->getGeometry();
   auto firstAtomList = firstGeom->getAtoms();
-  const auto& firstOccupations = _supersystems[0]->getNOccupiedOrbitals<SCFMode>();
+  const auto& firstOccupations = _supersystems[0]->template getNOccupiedOrbitals<SCFMode>();
   for (unsigned int sys = 1; sys < _supersystems.size(); ++sys) {
     auto atomList = _supersystems[sys]->getGeometry()->getAtoms();
     if (atomList.size() != firstAtomList.size())
@@ -59,7 +59,7 @@ ActiveSpaceSelectionTask<SCFMode>::ActiveSpaceSelectionTask(std::vector<std::sha
         throw SerenityError("The atoms have to be ordered in the same way for all structures!");
     }
     // Check the number of electrons in the subsystems
-    const auto& occupations = _supersystems[sys]->getNOccupiedOrbitals<SCFMode>();
+    const auto& occupations = _supersystems[sys]->template getNOccupiedOrbitals<SCFMode>();
     for_spin(firstOccupations, occupations) {
       if (firstOccupations_spin != occupations_spin)
         throw SerenityError("Inconsistent number of electrons along the reaction coordinate!");
@@ -67,7 +67,7 @@ ActiveSpaceSelectionTask<SCFMode>::ActiveSpaceSelectionTask(std::vector<std::sha
   }
   // Initialize the orbital map
   for (auto& sys : _supersystems) {
-    auto nOcc = sys->getNOccupiedOrbitals<SCFMode>();
+    auto nOcc = sys->template getNOccupiedOrbitals<SCFMode>();
     SpinPolarizedData<SCFMode, Eigen::VectorXi> hasPartner;
     for_spin(nOcc, hasPartner) {
       hasPartner_spin = Eigen::VectorXi::Constant(nOcc_spin, 1);
@@ -76,7 +76,7 @@ ActiveSpaceSelectionTask<SCFMode>::ActiveSpaceSelectionTask(std::vector<std::sha
     std::vector<SpinPolarizedData<SCFMode, Eigen::MatrixXi>> mapVector;
     for (unsigned int j = 0; j < _supersystems.size(); ++j) {
       SpinPolarizedData<SCFMode, Eigen::MatrixXi> newMap;
-      auto nOccJ = _supersystems[j]->getNOccupiedOrbitals<SCFMode>();
+      auto nOccJ = _supersystems[j]->template getNOccupiedOrbitals<SCFMode>();
       for_spin(newMap, nOccJ, nOcc) {
         newMap_spin = Eigen::MatrixXi::Constant(nOcc_spin, nOccJ_spin, 0);
       };
@@ -272,7 +272,7 @@ void ActiveSpaceSelectionTask<SCFMode>::prepareOrbitals() {
       scfTask.run();
     }
     else {
-      if (!sys->hasElectronicStructure<SCFMode>())
+      if (!sys->template hasElectronicStructure<SCFMode>())
         throw SerenityError((std::string) "No electronic structure available. However load=true was set! System " +
                             sys->getSystemName());
     } // else if !settings.load
@@ -302,7 +302,7 @@ void ActiveSpaceSelectionTask<SCFMode>::buildOrbitalPopulations() {
     SPMatrix<SCFMode> orbitalPopulations;
     if (settings.populationAlgorithm == Options::POPULATION_ANALYSIS_ALGORITHMS::MULLIKEN) {
       orbitalPopulations = MullikenPopulationCalculator<SCFMode>::calculateAtomwiseOrbitalPopulations(
-          sys->getActiveOrbitalController<SCFMode>()->getCoefficients(),
+          sys->template getActiveOrbitalController<SCFMode>()->getCoefficients(),
           sys->getOneElectronIntegralController()->getOverlapIntegrals(),
           sys->getAtomCenteredBasisController()->getBasisIndices());
     }
@@ -317,7 +317,7 @@ void ActiveSpaceSelectionTask<SCFMode>::buildOrbitalPopulations() {
       throw SerenityError("The algorithm used for evaluating orbital-wise populations is not supported.");
     }
     SPMatrix<SCFMode> occPopulations;
-    const auto nOcc = sys->getNOccupiedOrbitals<SCFMode>();
+    const auto nOcc = sys->template getNOccupiedOrbitals<SCFMode>();
     for_spin(occPopulations, orbitalPopulations, nOcc) {
       occPopulations_spin = orbitalPopulations_spin.block(0, 0, orbitalPopulations_spin.rows(), nOcc_spin);
     };
@@ -563,9 +563,9 @@ void ActiveSpaceSelectionTask<SCFMode>::calculateKineticEnergy() {
   for (unsigned int i = 0; i < _supersystems.size(); ++i) {
     const auto& system = _supersystems[i];
     // Calculate the kinetic energies of the occupied orbitals
-    const auto& coeff = system->getActiveOrbitalController<SCFMode>()->getCoefficients();
+    const auto& coeff = system->template getActiveOrbitalController<SCFMode>()->getCoefficients();
     auto kinIntegrals = libint->compute1eInts(libint2::Operator::kinetic, system->getBasisController());
-    auto nOcc = system->getNOccupiedOrbitals<SCFMode>();
+    auto nOcc = system->template getNOccupiedOrbitals<SCFMode>();
     SpinPolarizedData<SCFMode, Eigen::VectorXd> kineticEnergies;
     for_spin(nOcc, coeff, kineticEnergies) {
       kineticEnergies_spin.resize(nOcc_spin);
diff --git a/src/tasks/EDATask.cpp b/src/tasks/EDATask.cpp
index 6be292b..e37a3ae 100644
--- a/src/tasks/EDATask.cpp
+++ b/src/tasks/EDATask.cpp
@@ -61,51 +61,52 @@ void EDATask<SCFMode>::run() {
   {
     auto super = (*_systemA) + (*_systemB);
     auto pot = std::make_shared<EDAPotentials<SCFMode>>(_systemA, _systemB, super, EDAEnergyContributions::ES);
-    const auto& P(super->getElectronicStructure<SCFMode>()->getDensityMatrixController()->getDensityMatrix());
-    pot->getFockMatrix(P, super->getElectronicStructure<SCFMode>()->getEnergyComponentController());
+    const auto& P(super->template getElectronicStructure<SCFMode>()->getDensityMatrixController()->getDensityMatrix());
+    pot->getFockMatrix(P, super->template getElectronicStructure<SCFMode>()->getEnergyComponentController());
     eES = pot->getEDAEnergyContribution();
   }
   {
     auto super = (*_systemA) + (*_systemB);
     auto pot = std::make_shared<EDAPotentials<SCFMode>>(_systemA, _systemB, super, EDAEnergyContributions::ESX);
-    const auto& P(super->getElectronicStructure<SCFMode>()->getDensityMatrixController()->getDensityMatrix());
-    pot->getFockMatrix(P, super->getElectronicStructure<SCFMode>()->getEnergyComponentController());
+    const auto& P(super->template getElectronicStructure<SCFMode>()->getDensityMatrixController()->getDensityMatrix());
+    pot->getFockMatrix(P, super->template getElectronicStructure<SCFMode>()->getEnergyComponentController());
     eESX = pot->getEDAEnergyContribution();
   }
   {
     auto super = (*_systemA) + (*_systemB);
     auto pot = std::make_shared<EDAPotentials<SCFMode>>(_systemA, _systemB, super, EDAEnergyContributions::ESXCT);
-    Scf<SCFMode>::perform(settings, super->getElectronicStructure<SCFMode>(), pot);
+    Scf<SCFMode>::perform(settings, super->template getElectronicStructure<SCFMode>(), pot);
     eESXCT = pot->getEDAEnergyContribution();
   }
   {
     auto super = (*_systemA) + (*_systemB);
     auto pot = std::make_shared<EDAPotentials<SCFMode>>(_systemA, _systemB, super, EDAEnergyContributions::ESXPLX);
-    Scf<SCFMode>::perform(settings, super->getElectronicStructure<SCFMode>(), pot);
+    Scf<SCFMode>::perform(settings, super->template getElectronicStructure<SCFMode>(), pot);
     eESXPLX = pot->getEDAEnergyContribution();
   }
   {
     auto super = (*_systemA) + (*_systemB);
     auto pot = std::make_shared<EDAPotentials<SCFMode>>(_systemA, _systemB, super, EDAEnergyContributions::ESPL);
-    Scf<SCFMode>::perform(settings, super->getElectronicStructure<SCFMode>(), pot);
+    Scf<SCFMode>::perform(settings, super->template getElectronicStructure<SCFMode>(), pot);
     eESPL = pot->getEDAEnergyContribution();
   }
   {
     auto super = (*_systemA) + (*_systemB);
     auto pot = std::make_shared<EDAPotentials<SCFMode>>(_systemA, _systemB, super, EDAEnergyContributions::ESXEX);
-    const auto& P = super->getElectronicStructure<SCFMode>()->getDensityMatrixController()->getDensityMatrix();
-    super->getElectronicStructure<SCFMode>()->getMolecularOrbitals()->updateOrbitals(
-        pot->getFockMatrix(P, super->getElectronicStructure<SCFMode>()->getEnergyComponentController()),
+    const auto& P = super->template getElectronicStructure<SCFMode>()->getDensityMatrixController()->getDensityMatrix();
+    super->template getElectronicStructure<SCFMode>()->getMolecularOrbitals()->updateOrbitals(
+        pot->getFockMatrix(P, super->template getElectronicStructure<SCFMode>()->getEnergyComponentController()),
         super->getOneElectronIntegralController());
-    pot->getFockMatrix(P, super->getElectronicStructure<SCFMode>()->getEnergyComponentController());
+    pot->getFockMatrix(P, super->template getElectronicStructure<SCFMode>()->getEnergyComponentController());
     eESXEX = pot->getEDAEnergyContribution();
   }
   {
     auto super = (*_systemA) + (*_systemB);
     ScfTask<SCFMode> scf(super);
     scf.run();
-    e0 = _systemA->getElectronicStructure<SCFMode>()->getEnergy() + _systemB->getElectronicStructure<SCFMode>()->getEnergy();
-    eInt = super->getElectronicStructure<SCFMode>()->getEnergy() - e0;
+    e0 = _systemA->template getElectronicStructure<SCFMode>()->getEnergy() +
+         _systemB->template getElectronicStructure<SCFMode>()->getEnergy();
+    eInt = super->template getElectronicStructure<SCFMode>()->getEnergy() - e0;
   }
   libint.freeEngines(libint2::Operator::coulomb, 0, 2);
   libint.freeEngines(libint2::Operator::coulomb, 0, 3);
diff --git a/src/tasks/ElectronicStructureCopyTask.cpp b/src/tasks/ElectronicStructureCopyTask.cpp
index dd1ce44..1c7c392 100644
--- a/src/tasks/ElectronicStructureCopyTask.cpp
+++ b/src/tasks/ElectronicStructureCopyTask.cpp
@@ -330,9 +330,10 @@ void ElectronicStructureCopyTask<SCFMode>::run() {
     // Construct the new electronic structure of the target system and write it to disk.
     auto newOrbitalController = std::make_shared<OrbitalController<SCFMode>>(
         std::move(rotatedCoefficientsPtr), targetBasisController, std::move(eigenvaluesPtr));
-    auto targetElectronicStructure = std::make_shared<ElectronicStructure<SCFMode>>(
-        newOrbitalController, targetSystem->getOneElectronIntegralController(), targetSystem->getNOccupiedOrbitals<SCFMode>());
-    targetSystem->setElectronicStructure<SCFMode>(targetElectronicStructure);
+    auto targetElectronicStructure =
+        std::make_shared<ElectronicStructure<SCFMode>>(newOrbitalController, targetSystem->getOneElectronIntegralController(),
+                                                       targetSystem->template getNOccupiedOrbitals<SCFMode>());
+    targetSystem->template setElectronicStructure<SCFMode>(targetElectronicStructure);
     targetElectronicStructure->toHDF5(targetSystem->getHDF5BaseName(), targetSystem->getSettings().identifier);
     OutputControl::nOut << " done" << std::endl;
   } // for targetSystem
diff --git a/src/tasks/FDETask.cpp b/src/tasks/FDETask.cpp
index c0b697f..4ab989b 100644
--- a/src/tasks/FDETask.cpp
+++ b/src/tasks/FDETask.cpp
@@ -73,10 +73,10 @@ void FDETask<SCFMode>::run() {
   _activeSystem->setDiskMode(false);
   for (auto sys : _environmentSystems) {
     if (sys->getSettings().scfMode == RESTRICTED) {
-      sys->getElectronicStructure<RESTRICTED>();
+      sys->template getElectronicStructure<RESTRICTED>();
     }
     else {
-      sys->getElectronicStructure<UNRESTRICTED>();
+      sys->template getElectronicStructure<UNRESTRICTED>();
     }
     if (settings.embedding.embeddingMode == Options::KIN_EMBEDDING_MODES::NADD_FUNC)
       sys->setDiskMode(true);
@@ -151,9 +151,9 @@ void FDETask<SCFMode>::run() {
     if (settings.calculateEnvironmentEnergy) {
       auto envsettings = sys->getSettings();
       auto envEnergies = sys->template getElectronicStructure<SCFMode>()->getEnergyComponentController();
-      auto densityMatrixEnvironment = sys->getElectronicStructure<SCFMode>()->getDensityMatrix();
+      auto densityMatrixEnvironment = sys->template getElectronicStructure<SCFMode>()->getDensityMatrix();
       if (envsettings.method == Options::ELECTRONIC_STRUCTURE_THEORIES::HF) {
-        auto envPot = sys->getPotentials<SCFMode, Options::ELECTRONIC_STRUCTURE_THEORIES::HF>();
+        auto envPot = sys->template getPotentials<SCFMode, Options::ELECTRONIC_STRUCTURE_THEORIES::HF>();
         envPot->getFockMatrix(densityMatrixEnvironment, envEnergies);
       }
       else if (envsettings.method == Options::ELECTRONIC_STRUCTURE_THEORIES::DFT) {
@@ -161,7 +161,7 @@ void FDETask<SCFMode>::run() {
         auto envDispEnergy = DispersionCorrectionCalculator::calcDispersionEnergyCorrection(
             sys->getSettings().dft.dispersion, sys->getGeometry(), sys->getSettings().dft.functional);
         envEnergies->addOrReplaceComponent(ENERGY_CONTRIBUTIONS::KS_DFT_DISPERSION_CORRECTION, envDispEnergy);
-        auto envPot = sys->getPotentials<SCFMode, Options::ELECTRONIC_STRUCTURE_THEORIES::DFT>();
+        auto envPot = sys->template getPotentials<SCFMode, Options::ELECTRONIC_STRUCTURE_THEORIES::DFT>();
         envPot->getFockMatrix(densityMatrixEnvironment, envEnergies);
         envEnergies->addOrReplaceComponent(
             std::pair<ENERGY_CONTRIBUTIONS, double>(ENERGY_CONTRIBUTIONS::KS_DFT_PERTURBATIVE_CORRELATION, 0.0));
diff --git a/src/tasks/FreezeAndThawTask.cpp b/src/tasks/FreezeAndThawTask.cpp
index d463f52..5fde690 100644
--- a/src/tasks/FreezeAndThawTask.cpp
+++ b/src/tasks/FreezeAndThawTask.cpp
@@ -157,12 +157,12 @@ void FreezeAndThawTask<SCFMode>::run() {
       if (nSystem > 0 and settings.gridCutOff < 0.0) {
         for (unsigned int nSystem = 0; nSystem < _activeSystems.size(); nSystem++) {
           densOnGridControllers[nSystem] = DensityOnGridFactory<SCFMode>::produce(
-              _activeSystems[nSystem]->getElectronicStructure<SCFMode>()->getDensityMatrixController(), supersystemgrid,
-              1, activeSystem->getSettings());
+              _activeSystems[nSystem]->template getElectronicStructure<SCFMode>()->getDensityMatrixController(),
+              supersystemgrid, 1, activeSystem->getSettings());
         }
         for (unsigned int nSystem = 0; nSystem < _passiveSystems.size(); nSystem++) {
           densOnGridControllers[nSystem + _activeSystems.size()] = DensityOnGridFactory<SCFMode>::produce(
-              _passiveSystems[nSystem]->getElectronicStructure<SCFMode>()->getDensityMatrixController(),
+              _passiveSystems[nSystem]->template getElectronicStructure<SCFMode>()->getDensityMatrixController(),
               supersystemgrid, 1, activeSystem->getSettings());
         }
       }
@@ -334,8 +334,8 @@ void FreezeAndThawTask<SCFMode>::run() {
 
     for (unsigned int nSystem = 0; nSystem < _activeSystems.size(); nSystem++) {
       auto calc = DensityOnGridFactory<SCFMode>::produce(
-          _activeSystems[nSystem]->getElectronicStructure<SCFMode>()->getDensityMatrixController(), finalGrid, 1,
-          _activeSystems[nSystem]->getSettings());
+          _activeSystems[nSystem]->template getElectronicStructure<SCFMode>()->getDensityMatrixController(), finalGrid,
+          1, _activeSystems[nSystem]->getSettings());
       *superSysDens += calc->getDensityOnGrid();
       if (gga) {
         superSysdensGrad->x += calc->getDensityGradientOnGrid().x;
@@ -350,8 +350,8 @@ void FreezeAndThawTask<SCFMode>::run() {
 
     for (unsigned int nSystem = 0; nSystem < _passiveSystems.size(); nSystem++) {
       auto calc = DensityOnGridFactory<SCFMode>::produce(
-          _passiveSystems[nSystem]->getElectronicStructure<SCFMode>()->getDensityMatrixController(), finalGrid, 1,
-          _passiveSystems[nSystem]->getSettings());
+          _passiveSystems[nSystem]->template getElectronicStructure<SCFMode>()->getDensityMatrixController(), finalGrid,
+          1, _passiveSystems[nSystem]->getSettings());
       *superSysDens += calc->getDensityOnGrid();
       if (gga) {
         superSysdensGrad->x += calc->getDensityGradientOnGrid().x;
@@ -370,7 +370,7 @@ void FreezeAndThawTask<SCFMode>::run() {
     naddKinEnergy += flib.calcData(FUNCTIONAL_DATA_TYPE::GRADIENT_INVARIANTS, kinefunc, superSysDensOnGrid, 0).energy;
 
     for (auto& sys : _activeSystems) {
-      auto eCont = sys->getElectronicStructure<SCFMode>()->getEnergyComponentController();
+      auto eCont = sys->template getElectronicStructure<SCFMode>()->getEnergyComponentController();
       eCont->addOrReplaceComponent(ENERGY_CONTRIBUTIONS::FDE_NAD_XC, naddXcEnergy);
       eCont->addOrReplaceComponent(ENERGY_CONTRIBUTIONS::FDE_NAD_KINETIC, naddKinEnergy);
     }
@@ -380,7 +380,7 @@ void FreezeAndThawTask<SCFMode>::run() {
   printSubSectionTitle("Final Freeze-and-Thaw Energies");
   for (unsigned int nSystem = 0; nSystem < _activeSystems.size(); nSystem++) {
     printBigCaption((std::string) "Active System: " + _activeSystems[nSystem]->getSettings().name);
-    auto eCont = _activeSystems[nSystem]->getElectronicStructure<SCFMode>()->getEnergyComponentController();
+    auto eCont = _activeSystems[nSystem]->template getElectronicStructure<SCFMode>()->getEnergyComponentController();
     eCont->printAllComponents();
     std::cout << std::endl;
     std::cout << std::endl;
@@ -448,11 +448,11 @@ void FreezeAndThawTask<SCFMode>::calculateNonAdditiveDispersionCorrection() {
     Timings::timeTaken("FDE -    Non-Add. Disper.");
   }
   if (settings.calculateSolvationEnergy) {
-    auto eCont = activeSystem->getElectronicStructure<SCFMode>()->getEnergyComponentController();
+    auto eCont = activeSystem->template getElectronicStructure<SCFMode>()->getEnergyComponentController();
     eCont->addOrReplaceComponent(ENERGY_CONTRIBUTIONS::FDE_SOLV_SCALED_NAD_DISP, solvScaledNadDispCorrection);
   }
   for (auto& sys : _activeSystems) {
-    auto eCont = sys->getElectronicStructure<SCFMode>()->getEnergyComponentController();
+    auto eCont = sys->template getElectronicStructure<SCFMode>()->getEnergyComponentController();
     eCont->addOrReplaceComponent(ENERGY_CONTRIBUTIONS::FDE_NAD_DISP, nadDispCorrection);
   }
 }
diff --git a/src/tasks/GeometryOptimizationTask.cpp b/src/tasks/GeometryOptimizationTask.cpp
index 5f9aca3..04d28ff 100644
--- a/src/tasks/GeometryOptimizationTask.cpp
+++ b/src/tasks/GeometryOptimizationTask.cpp
@@ -93,7 +93,7 @@ void GeometryOptimizationTask<SCFMode>::run() {
      */
     unsigned int cycle = 1;
     Eigen::VectorXd oldParams = coords;
-    double oldEnergy = _activeSystems[0]->getElectronicStructure<SCFMode>()->getEnergy();
+    double oldEnergy = _activeSystems[0]->template getElectronicStructure<SCFMode>()->getEnergy();
     /*
      * Lambda Function for the Optimizer
      */
@@ -108,7 +108,7 @@ void GeometryOptimizationTask<SCFMode>::run() {
       // Calculate Energy for new Coordinate Set
       auto scf = ScfTask<SCFMode>(_activeSystems[0]);
       scf.run();
-      value = _activeSystems[0]->getElectronicStructure<SCFMode>()->getEnergy();
+      value = _activeSystems[0]->template getElectronicStructure<SCFMode>()->getEnergy();
 
       // Calc/Print Gradients
 
@@ -213,8 +213,8 @@ void GeometryOptimizationTask<SCFMode>::run() {
     auto oldParams = tmpCoords;
     assert(_activeSystems[0]->getSettings().method == Options::ELECTRONIC_STRUCTURE_THEORIES::DFT &&
            "Check logic in this task for its compatible with HF.");
-    double oldEnergy =
-        _activeSystems[0]->getElectronicStructure<SCFMode>()->getEnergy(ENERGY_CONTRIBUTIONS::FDE_SUPERSYSTEM_ENERGY_DFT_DFT);
+    double oldEnergy = _activeSystems[0]->template getElectronicStructure<SCFMode>()->getEnergy(
+        ENERGY_CONTRIBUTIONS::FDE_SUPERSYSTEM_ENERGY_DFT_DFT);
     unsigned int optCycle = 1;
 
     auto const updateFunction = [&](const Eigen::VectorXd& parameters, double& value, Eigen::VectorXd& gradients,
@@ -245,7 +245,8 @@ void GeometryOptimizationTask<SCFMode>::run() {
       /* Variables for optimization. */
       assert(_activeSystems[0]->getSettings().method == Options::ELECTRONIC_STRUCTURE_THEORIES::DFT &&
              "Check logic in this task for its compatibility with HF.");
-      value = _activeSystems[0]->getElectronicStructure<SCFMode>()->getEnergy(ENERGY_CONTRIBUTIONS::FDE_SUPERSYSTEM_ENERGY_DFT_DFT);
+      value = _activeSystems[0]->template getElectronicStructure<SCFMode>()->getEnergy(
+          ENERGY_CONTRIBUTIONS::FDE_SUPERSYSTEM_ENERGY_DFT_DFT);
 
       gradients =
           Eigen::Map<const Eigen::VectorXd>(SupersystemGeometry.getGradients().data(), SupersystemGeometry.getNAtoms() * 3);
diff --git a/src/tasks/GradientTask.cpp b/src/tasks/GradientTask.cpp
index 37fb5db..420cb4a 100644
--- a/src/tasks/GradientTask.cpp
+++ b/src/tasks/GradientTask.cpp
@@ -82,7 +82,7 @@ void GradientTask<SCFMode>::run() {
       _activeSystems[0]->getGeometry()->printGradients();
     }
     else {
-      auto es = _activeSystems[0]->getElectronicStructure<SCFMode>();
+      auto es = _activeSystems[0]->template getElectronicStructure<SCFMode>();
       if (!es->potentialsAvailable()) {
         ScfTask<SCFMode> scf(_activeSystems[0]);
         scf.run();
@@ -176,7 +176,7 @@ void GradientTask<SCFMode>::run() {
         task.run();
 
         takeTime("Gradient Step");
-        auto es = activeSystem->getElectronicStructure<SCFMode>();
+        auto es = activeSystem->template getElectronicStructure<SCFMode>();
         auto potBundle = es->getPotentialBundle();
         auto potentialGradients = potBundle->getGradients();
         Matrix<double> ccRepDerivative(activeSystem->getGeometry()->getAtoms().size(), 3);
diff --git a/src/tasks/LRSCFTask.cpp b/src/tasks/LRSCFTask.cpp
index c0a2b32..d3612e7 100644
--- a/src/tasks/LRSCFTask.cpp
+++ b/src/tasks/LRSCFTask.cpp
@@ -121,10 +121,10 @@ void LRSCFTask<SCFMode>::run() {
     if (_lrscf.size() != 1)
       throw SerenityError("LMO-TDDFT only available for supersystem calculations.");
 
-    auto es = _act[0]->getElectronicStructure<SCFMode>();
+    auto es = _act[0]->template getElectronicStructure<SCFMode>();
     auto energyComponentController = es->getEnergyComponentController();
     auto potentials =
-        _act[0]->getPotentials<SCFMode, Options::ELECTRONIC_STRUCTURE_THEORIES::DFT>(Options::GRID_PURPOSES::DEFAULT);
+        _act[0]->template getPotentials<SCFMode, Options::ELECTRONIC_STRUCTURE_THEORIES::DFT>(Options::GRID_PURPOSES::DEFAULT);
     auto orbitalController = es->getMolecularOrbitals();
     auto coeff = _lrscf[0]->getCoefficients();
     auto eigenvalues = _lrscf[0]->getEigenvalues();
diff --git a/src/tasks/SystemAdditionTask.cpp b/src/tasks/SystemAdditionTask.cpp
index a728ea5..257ef9b 100644
--- a/src/tasks/SystemAdditionTask.cpp
+++ b/src/tasks/SystemAdditionTask.cpp
@@ -120,10 +120,11 @@ void SystemAdditionTask<SCFMode>::run() {
       auto subsystem = _subsystems[iSub];
       CoefficientMatrix<SCFMode>& newCoefficientMatrix = *newCoefficientMatrixPtr;
       SpinPolarizedData<SCFMode, Eigen::VectorXd>& newEigenvalues = *newEigenvaluesPtr;
-      CoefficientMatrix<SCFMode> subsystemCoefficients = subsystem->getActiveOrbitalController<SCFMode>()->getCoefficients();
+      CoefficientMatrix<SCFMode> subsystemCoefficients =
+          subsystem->template getActiveOrbitalController<SCFMode>()->getCoefficients();
       SpinPolarizedData<SCFMode, Eigen::VectorXd> subsystemEigenvalues =
-          subsystem->getActiveOrbitalController<SCFMode>()->getEigenvalues();
-      auto nOccSub = subsystem->getNOccupiedOrbitals<SCFMode>();
+          subsystem->template getActiveOrbitalController<SCFMode>()->getEigenvalues();
+      auto nOccSub = subsystem->template getNOccupiedOrbitals<SCFMode>();
       Eigen::MatrixXd projection;
       if (subsystem->getAtomCenteredBasisController()->getBasisLabel() ==
           _supersystem->getAtomCenteredBasisController()->getBasisLabel()) {
diff --git a/src/tasks/SystemSplittingTask.cpp b/src/tasks/SystemSplittingTask.cpp
index 7a44dc2..a2c8c7c 100644
--- a/src/tasks/SystemSplittingTask.cpp
+++ b/src/tasks/SystemSplittingTask.cpp
@@ -199,7 +199,7 @@ void SystemSplittingTask<SCFMode>::run() {
     if (settings.systemPartitioning == Options::SYSTEM_SPLITTING_ALGORITHM::ENFORCE_CHARGES) {
       for (unsigned int iSub = 0; iSub < nSubsystems; ++iSub) {
         const auto subsystem = _subsystems[iSub];
-        const auto nOccSub = subsystem->getNOccupiedOrbitals<SCFMode>();
+        const auto nOccSub = subsystem->template getNOccupiedOrbitals<SCFMode>();
         for_spin(nOccSub, assignment, subsystemWisePopulations) {
           for (unsigned int i = 0; i < nOccSub_spin; ++i) {
             unsigned int maxOrb;
@@ -215,7 +215,7 @@ void SystemSplittingTask<SCFMode>::run() {
     SPADEAlgorithm<SCFMode> spade(_supersystem, _subsystems[0]);
     assignment = spade.run();
     if (settings.systemPartitioning == Options::SYSTEM_SPLITTING_ALGORITHM::SPADE_ENFORCE_CHARGES) {
-      auto nOccAct = _subsystems[0]->getNOccupiedOrbitals<SCFMode>();
+      auto nOccAct = _subsystems[0]->template getNOccupiedOrbitals<SCFMode>();
       for_spin(assignment, nOccAct) {
         assignment_spin = Eigen::VectorXi::Constant(assignment_spin.size(), 1);
         assignment_spin.head(nOccAct_spin).setZero();
@@ -265,12 +265,12 @@ void SystemSplittingTask<SCFMode>::run() {
     }
 
     subsystem->setSCFMode(SCFMode);
-    subsystem->setElectronicStructure<SCFMode>(subsystemES);
+    subsystem->template setElectronicStructure<SCFMode>(subsystemES);
     subsystem->getGeometry()->printToFile(subsystem->getHDF5BaseName(), subsystem->getSettings().identifier);
     subsystemES->toHDF5(subsystem->getHDF5BaseName(), subsystem->getSettings().identifier);
     // Check charges and spin of the system, since it may have changed during the partitioning.
     if (settings.systemPartitioning != Options::SYSTEM_SPLITTING_ALGORITHM::ENFORCE_CHARGES) {
-      auto oldNElSub = subsystem->getNElectrons<SCFMode>();
+      auto oldNElSub = subsystem->template getNElectrons<SCFMode>();
       auto newNElSub = SystemSplittingTools<SCFMode>::getNElectrons(orbitalSelection).first;
       unsigned int nTotOld = 0;
       unsigned int nTotNew = 0;
diff --git a/src/tasks/TDEmbeddingTask.h b/src/tasks/TDEmbeddingTask.h
index 9f98a05..d2ed91a 100644
--- a/src/tasks/TDEmbeddingTask.h
+++ b/src/tasks/TDEmbeddingTask.h
@@ -39,7 +39,7 @@ namespace Serenity {
 
 using namespace Serenity::Reflection;
 class SystemController;
-class Settings;
+struct Settings;
 
 struct TDEmbeddingTaskSettings {
   TDEmbeddingTaskSettings()
diff --git a/src/tasks/TSTask.cpp b/src/tasks/TSTask.cpp
index 7373fdc..32d9f32 100644
--- a/src/tasks/TSTask.cpp
+++ b/src/tasks/TSTask.cpp
@@ -24,6 +24,7 @@
 #include "data/ElectronicStructure.h"
 #include "geometry/Geometry.h"
 #include "io/FormattedOutput.h"
+#include "io/HDF5.h"
 #include "math/saddlepoint/Bofill.h"
 #include "math/saddlepoint/QST.h"
 #include "system/SystemController.h"
@@ -110,7 +111,7 @@ void TSTask::run() {
     HDF5::dataset_exists(file, "normalModes");
 
     unsigned int nAtoms = _ts->getGeometry()->getNAtoms();
-    unsigned int nModes = 3 * nAtoms - _ts->getGeometry()->isLinear() ? 5 : 6;
+    unsigned int nModes = 3 * nAtoms - (_ts->getGeometry()->isLinear() ? 5 : 6);
     Eigen::MatrixXd normalModes(3 * nAtoms, nModes);
     HDF5::load(file, "normalModes", normalModes);
     file.close();
